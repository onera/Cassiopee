import os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# Converter requires:
# C++ compiler
# Fortran compiler: defined in config.py
# Numpy
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if libhdf5 exists ======================================================
(hdf, hdfIncDir, hdfLibDir, hdflibs) = Dist.checkHdf(additionalLibPaths,
                                                     additionalIncludePaths)

# Test if libnetcdf exists ======================================================
(netcdf, netcdfIncDir, netcdfLibDir, netcdflibs) = Dist.checkNetcdf(additionalLibPaths,
                                                                    additionalIncludePaths)

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir, mpiLibs) = Dist.checkMpi(additionalLibPaths,
                                                     additionalIncludePaths)
(mpi4py, mpi4pyIncDir, mpi4pyLibDir) = Dist.checkMpi4py(additionalLibPaths,
                                                        additionalIncludePaths)

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, pythonIncDir]
libraries = ["kcore"]
if hdf:
    libraryDirs.append(hdfLibDir)
    includeDirs.append(hdfIncDir)
if netcdf:
    libraryDirs.append(netcdfLibDir)
    includeDirs.append(netcdfIncDir)
ADDITIONALCPPFLAGS = []
if mpi and mpi4py:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    ADDITIONALCPPFLAGS += ['-D_MPI']
if mpi4py:
    includeDirs.append(mpi4pyIncDir)

if hdf: 
    libraries.append(hdflibs)
    ADDITIONALCPPFLAGS += ['-D_HDF5']
if netcdf: 
    libraries.append(netcdflibs)
    ADDITIONALCPPFLAGS += ['-D_NETCDF']
if mpi: libraries += mpiLibs
    
(ok, libs, paths) = Dist.checkFortranLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None; ADDITIONALCPPFLAGS += ['-DUSE_C_REGEX'] # for old gcc < 5.0

AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  FORTRAN=f77compiler,
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')
env.Replace(CPPPATH=["Converter"]+additionalIncludePaths+includeDirs)
env.Replace(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS)
env.Replace(CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS)
env = Dist.createFortranBuilder(env, [kcoreIncDir])
ppf = Dist.createFortranFiles(env, srcs)

#==============================================================================
# Modification pour compiler certains fichiers specifiquement
cppOpts = Dist.getCppArgs()
files = ["Converter/hook.cpp", "Converter/identify.cpp", "Converter/nearest.cpp"]
if Cppcompiler.find('icc') == 0 or Cppcompiler.find('icpc') == 0:
    flags = ''
    for i in cppOpts:
        if i[0:2] != '-O' and i[0:9] != '-fp-model': flags += i+' '
    flags += '-fp-model=strict -O2'
    for i, v in enumerate(srcs.cpp_srcs):
        if v in files: srcs.cpp_srcs[i] = env.Object(v, CXXFLAGS=flags)

# Suppression vectorisation pour certains fichiers
files = ['Converter/cpyGhost2Real.cpp', 'Converter/fillCornerGhostCells.cpp',]
flags = ''
for i in cppOpts:
    if not Dist.isSimd(i): flags += i+' '
for i, v in enumerate(srcs.cpp_srcs):
    if v in files:
       #print('altering',v,flags)
       srcs.cpp_srcs[i] = env.Object(v, CXXFLAGS=flags)

myMod = env.StaticLibrary('converter', srcs.cpp_srcs+ppf)
modDir = 'build/'+ELSAPROD
dp1 = env.Install(modDir, myMod)
env.Alias(target="install", source=[dp1])
