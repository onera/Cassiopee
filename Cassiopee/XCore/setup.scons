import os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# XCore requires:
# C++ compiler
# Numpy, MPI
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir, mpiLibs) = Dist.checkMpi(additionalLibPaths,
                                                     additionalIncludePaths)
(mpi4py, mpi4pyIncDir, mpi4pyLibDir) = Dist.checkMpi4py(additionalLibPaths,
                                                        additionalIncludePaths)

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, pythonIncDir]
libraries = ["xcore"]

import srcs
import srcs_scotch
import srcs_zoltan
if srcs.PARADIGMA == 2:
    import srcs_paradigma23 as srcs_paradigma
elif srcs.PARADIGMA == 1:
    import srcs_paradigma

ADDITIONALCPPFLAGS = []
if mpi:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
if mpi4py:
    includeDirs.append(mpiIncDir)
if mpi: libraries += mpiLibs

(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Specific options for scotch
opt1 =['-DCOMMON_FILE_COMPRESS_GZ',
       '-DCOMMON_PTHREAD',
       '-DCOMMON_RANDOM_FIXED_SEED',
       '-DSCOTCH_DETERMINISTIC',
       '-DSCOTCH_RENAME','-DIDXSIZE64',
       '-DSCOTCH_MPI_ASYNC_COLL',
       '-DSCOTCH_PTHREAD','-DSCOTCH_PTHREAD_MPI',
       '-DSCOTCH_VERSION_NUM=7','-DSCOTCH_RELEASE_NUM=0','-DSCOTCH_PATCHLEVEL_NUM=4',
       '-IXCore/scotch']

opt1_1 = ['-DSCOTCH_PTSCOTCH']

#if Dist.DEBUG: opt1 += ['-DSCOTCH_DEBUG_ALL']

if Dist.GDOUBLEINT: opt1 += ['-DINTSIZE64']
else: opt1 += ['-DINTSIZE32']
if cc == 'gcc': opt1 += ['-Drestrict=__restrict'] # ['-Wrestrict']
elif cc == 'pgcc': opt1 += []
elif cc == 'nvc': opt1 += []
elif cc == 'icx': opt1 += []
elif cc == 'icc': opt1 += ['-restrict'] 
else: opt1 += []

# Specific options for paradigma - paradigma install path
if srcs.PARADIGMA != 0: PPATH = srcs_paradigma.PPATH
else: PPATH = 'paradigma'
opt2 = ['-I%s'%PPATH,'-I%s/mpi_wrapper'%PPATH,'-I%s/mesh'%PPATH,'-I%s/util'%PPATH,'-I%s/io'%PPATH,'-I%s/ppart'%PPATH,'-I%s/struct'%PPATH,'-I%s/pario'%PPATH,'-I%s/ext_wrapper'%PPATH]
opt2 += ['-IXCore/scotch']
opt2 += ['-std=c99', '-DSCOTCH_RENAME']
opt2 +=['-DPDM_HAVE_PTSCOTCH'] #,'-DPDM_ENABLE_ANISO_AGGLO=0']

# Specific options pour zoltan
opt3 = ['-IXCore/zoltan/include', '-IXCore/zoltan/driver',
'-IXCore/zoltan/zz', '-IXCore/zoltan/Utilities/shared',
'-IXCore/zoltan/lb', '-IXCore/zoltan/params', '-IXCore/zoltan/order',
'-IXCore/zoltan/par', '-IXCore/zoltan/all', '-IXCore/zoltan/ch',
'-IXCore/zoltan/coloring', '-IXCore/zoltan/graph', '-IXCore/zoltan/ha',
'-IXCore/zoltan/hier', '-IXCore/zoltan/hsfc', '-IXCore/zoltan/matrix',
'-IXCore/zoltan/rcb', '-IXCore/zoltan/reftree', '-IXCore/zoltan/phg',
'-IXCore/zoltan/tpls', '-IXCore/zoltan/simple', '-IXCore/zoltan/timer']

ADDITIONALCPPFLAGS += ['-IXCore'] + opt3
ADDITIONALCFLAGS = ADDITIONALCPPFLAGS

# Env =========================================================================
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None

AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons(),
                  CPPPATH=["XCore","XCore/CMP/include"]+additionalIncludePaths+includeDirs,
                  CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS,
                  CFLAGS=Dist.getCArgs()+ADDITIONALCFLAGS)

# Optimisation en -O0 pour certains fichiers pour l'intersection
cppOpts = Dist.getCppArgs()
files = ['XCore/intersectMesh/dcel.cpp', 'XCore/intersectMesh/ray.cpp']
if Cppcompiler.find('icc') == 0 or Cppcompiler.find('icpc') == 0:
    flags = ''
    for i in cppOpts:
        if i[0:2] != '-O' and i[0:9] != '-fp-model': flags += i+' '
    flags += '-fp-model=strict -O0'
    for i, v in enumerate(srcs.cpp_srcs):
       	if v in files:
           #print('altering', v, flags)
           srcs.cpp_srcs[i] = env.Object(v, CXXFLAGS=flags)
if Cppcompiler.find('gcc') == 0 or Cppcompiler.find('g++') == 0 or Cppcompiler == 'x86_64-w64-mingw32-gcc':
    flags = ''
    for i in cppOpts: 
        if i[0:2] != '-O': flags += i+' '
    for v, i in enumerate(srcs.cpp_srcs):
        if v in files:
            #print('altering', v, flags)
            srcs.cpp_srcs[i] = env.Object(v, CXXFLAGS=flags+'-O0')

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')
            
modDir = 'build/'+ELSAPROD
deps = []

# XCore
myMod = env.StaticLibrary('xcore1', srcs.cpp_srcs)

deps.append('libxcore1.a')

# Paradigma
if srcs.PARADIGMA != 0:
    #(pdm, pdmIncDir, pdmLibDir) = Dist.checkParadigma(additionalLibPaths, additionalIncludePaths)
    # suppression mpi ou no_mpi pour paradigma
    if mpi:
        src_paradigma = [x for x in srcs_paradigma.cpp_srcs if not 'mpi_wrapper/no_mpi' in x]
    else:
        src_paradigma = [x for x in srcs_paradigma.cpp_srcs if not 'mpi_wrapper/mpi' in x]
    srcs_pdm = []
    for i in src_paradigma: srcs_pdm.append('%s/%s'%(srcs_paradigma.PPATH,i))
    if mpi:
        env2 = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt1+opt1_1+opt2, 
                         CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt1+opt1_1+opt2)
        myMod2 = env2.StaticLibrary('pdm', srcs_pdm)
    else:
        env2 = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt1+opt2, 
                         CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt1+opt2)
        myMod2 = env2.StaticLibrary('pdm', srcs_pdm)
    deps.append('libpdm.a')
else: src_paradigma = []

# Scotch
if srcs.SCOTCH:
    env3 = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt1, 
                     CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt1)
    myMod3 = env3.StaticLibrary('scotch1', srcs_scotch.cpp_srcs1[0:99])
    myMod3b = env3.StaticLibrary('scotch2', srcs_scotch.cpp_srcs1[99:])
    deps += ['libscotch1.a', 'libscotch2.a']

    if mpi:
        env3 = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt1+opt1_1, 
                         CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt1+opt1_1)
        myMod4 = env3.StaticLibrary('ptscotch', srcs_scotch.cpp_srcs2)
        deps += ['libptscotch.a']

# zoltan
if srcs.ZOLTAN:
    if mpi:
        srcs_zolt = []
        for i in srcs_zoltan.cpp_srcs: srcs_zolt.append('%s/%s'%('XCore/zoltan',i))
        env5 = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt3, 
                         CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt3)
        myMod5 = env5.StaticLibrary('zoltan', srcs_zolt)
        deps.append('libzoltan.a')

# merge
command = "echo 'create build/%s/libxcore.a' > merge.l; "%ELSAPROD
command += "echo 'addlib build/%s/libxcore1.a' >> merge.l; "%ELSAPROD
if srcs.PARADIGMA != 0: 
    command += "echo 'addlib build/%s/libpdm.a' >> merge.l; "%ELSAPROD
if srcs.SCOTCH: 
    command += "echo 'addlib build/%s/libscotch1.a' >> merge.l; "%ELSAPROD
    command += "echo 'addlib build/%s/libscotch2.a' >> merge.l; "%ELSAPROD
    if mpi:
        command += "echo 'addlib build/%s/libptscotch.a' >> merge.l; "%ELSAPROD
if srcs.ZOLTAN and mpi:
    command += "echo 'addlib build/%s/libzoltan.a' >> merge.l; "%ELSAPROD
command += "echo 'save' >> merge.l; "
command += "echo 'end' >> merge.l"
command = 'sh -c \"'+command+'\"'

env.Command('merge.l', 'merge.ar', command)
env.Command('libxcore.a', deps+['merge.l'], "ar -M < merge.l")

# install deps
env.Alias(target="install", source=['libxcore.a'])
