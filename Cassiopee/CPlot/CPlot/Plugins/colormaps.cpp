/*    
    Copyright 2013-2025 Onera.

    This file is part of Cassiopee.

    Cassiopee is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Cassiopee is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Cassiopee.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "../Data.h"
#include <cmath>

//=============================================================================
// Colormaps plugins
//=============================================================================
// Attention: si on utilise les SHADERS, les colormaps utilisees sont 
// dans createColormapTextures

// Parameters:
// IN: f -> scalar field value
// OUT: r, g, b -> red, green, blue color values.

//============================================================================
/*
  Blue to red colormap (par defaut pour les isos)
*/
//============================================================================
void colBlueToRed(Data* d, double f, float* r, float* g, float* b)
{
  if (f < 0.25) 
  {
    // bleu, vert augmente
    *r = 0.;
    *g = 4.*f;
    *b = 1.;
  }
  else if (f < 0.5)
  {
    // bleu diminue
    *r = 0.;
    *g = 1.;
    *b = 4.*(0.5-f);
  }
  else if (f < 0.75)
  {
    // rouge augmente
    *r = 4*(f-0.5);
    *g = 1.;
    *b = 0.;
  }
  else
  {
    // vert diminue, on finit rouge
    *r = 1.;
    *g = 4.*(1.-f);
    *b = 0.;
  }
  //printf("%f %f %f %f\n", f, *r, *g, *b);
}

//============================================================================
/*
  Green to red colormap (par defaut pour les maillages)
  Dans cette colormap, on evite le (0.1,0.1,1.) utilise pour la selection.
*/
//============================================================================
void colGreenToRed(Data* d, double f, float* r, float* g, float* b)
{
  if (f < 0.25)
  {
    // vert, bleu augmente
    *r = 0.;
    *g = 0.9;
    *b = 4.*f;
  }
  else if (f < 0.5)
  {
    // vert diminue (evite le bleu de selection)
    *r = 0.4;
    *g = 4.*(0.5-f);
    *b = 0.9;
  }
  else if (f < 0.75)
  {
    // rouge augmente
    *r = 4.*(f-0.5);
    *g = 0.9;
    *b = 4.*(0.75-f);
  }
  else
  {
    *r = 0.9;
    *g = 4.*(f-0.75);
    *b = 0.;
  }

  //printf("%f %f %f %f\n", f, *r, *g, *b);
}

//============================================================================
/*
  Bi-color colormap with RGB interpolation
*/
//============================================================================
void col2RGB(Data* d, double f, float* r, float* g, float* b)
{
  float r1 = d->ptrState->colormapR1;
  float g1 = d->ptrState->colormapG1;
  float b1 = d->ptrState->colormapB1;
  float r2 = d->ptrState->colormapR2;
  float g2 = d->ptrState->colormapG2;
  float b2 = d->ptrState->colormapB2;
  *r = (1.-f)*r1+f*r2;
  *g = (1.-f)*g1+f*g2;
  *b = (1.-f)*b1+f*b2;
}

//============================================================================
/*
  Bi-color colormap with HSV interpolation
*/
//============================================================================
void col2HSV(Data* d, double f, float* r, float* g, float* b)
{
  float r1 = d->ptrState->colormapR1;
  float g1 = d->ptrState->colormapG1;
  float b1 = d->ptrState->colormapB1;
  float r2 = d->ptrState->colormapR2;
  float g2 = d->ptrState->colormapG2;
  float b2 = d->ptrState->colormapB2;
  float h1,s1,v1,h2,v2,s2,h,s,v,ro,go,bo;
  float delta, delta1, delta2;

  d->rgb2hsv(r1,g1,b1,h1,s1,v1);
  d->rgb2hsv(r2,g2,b2,h2,s2,v2);
  delta = fabs(h2-h1);
  delta1 = fabs(h2-h1-360.);
  delta2 = fabs(h2-h1+360.);
  if (delta1 < delta) h2 += -360.;
  else if (delta2 < delta) h2 += 360.;

  h = (1.-f)*h1+f*h2;
  s = (1.-f)*s1+f*s2;
  v = (1.-f)*v1+f*v2;
  if (h < 0) h += 360.;
  else if (h > 360.) h += -360.;
  d->hsv2rgb(h,s,v,ro,go,bo);
  *r = (float)ro;
  *g = (float)go;
  *b = (float)bo;
}

//=============================================================================
/*
  Diverging colormap
*/
//=============================================================================
void diverging(Data* d, double f, float* r, float* g, float* b)
{
  if (f < 0.5)
  {
    if (f < 0.25) 
    {
      if (f < 0.125)
      {
        if (f < 0.03125) 
        {*r = 0.23137254902+1.12941176471*f;
          *g = 0.298039215686+1.7568627451*f;
          *b = 0.752941176471+239.937254902*f; }
        else if (f < 0.0625) 
        {*r = 0.23137254902+1.12941176471*f;
          *g = 0.298039215686+1.7568627451*f;
          *b = 15.6588235294-237.050980392*f;  }
        else if (f < 0.09375) 
        {*r = 0.223529411765+1.25490196078*f;
          *g = 0.305882352941+1.63137254902*f;
          *b = 0.764705882353+1.25490196078*f; }
        else 
        {*r = 0.211764705882+1.38039215686*f;
          *g = 0.305882352941+1.63137254902*f;
          *b = 0.776470588235+1.12941176471*f;  }
      }
      else
      {   
        if (f < 0.15625) 
        { *r = 0.227450980392+1.25490196078*f;
          *g = 0.321568627451+1.50588235294*f;
          *b = 0.807843137255+0.878431372549*f; }
        else if (f < 0.1875) 
        { *r = 0.207843137255+1.38039215686*f;
          *g = 0.321568627451+1.50588235294*f;
          *b = 0.827450980392+0.752941176471*f; }
        else if (f < 0.21875) 
        {*r = 0.207843137255+1.38039215686*f;
          *g = 0.345098039216+1.38039215686*f;
          *b = 0.874509803922+0.501960784314*f;  }
        else 
        {*r = 0.207843137255+1.38039215686*f;
          *g = 0.345098039216+1.38039215686*f;
          *b = 0.901960784314+0.376470588235*f;  } 
      }
    }
    else
    { 
      if (f < 0.375)
      {
        if (f < 0.28125) 
        {*r = 0.207843137255+1.38039215686*f;
          *g = 0.407843137255+1.12941176471*f;
          *b = 0.964705882353+0.125490196078*f;  }
        else if (f < 0.3125) 
        {*r = 0.207843137255+1.38039215686*f;
          *g = 0.407843137255+1.12941176471*f;
          *b = 1.0+0.0*f;  }
        else if (f < 0.34375) 
        {*r = 0.207843137255+1.38039215686*f;
          *g = 0.486274509804+0.878431372549*f;
          *b = 1.07843137255-0.250980392157*f;  }
        else 
        {*r = 0.250980392157+1.25490196078*f;
          *g = 0.486274509804+0.878431372549*f;
          *b = 1.16470588235-0.501960784314*f;  }
      }
      else
      {
        if (f < 0.40625) 
        {*r = 0.250980392157+1.25490196078*f;
          *g = 0.580392156863+0.627450980392*f;
          *b = 1.21176470588-0.627450980392*f;  }
        else if (f < 0.4375) 
        {*r = 0.250980392157+1.25490196078*f;
          *g = 0.63137254902+0.501960784314*f;
          *b = 1.26274509804-0.752941176471*f;  }
        else if (f < 0.46875) 
        {*r = 0.305882352941+1.12941176471*f;
          *g = 0.741176470588+0.250980392157*f;
          *b = 1.37254901961-1.00392156863*f;  }
        else 
        {*r = 0.364705882353+1.00392156863*f;
          *g = 0.858823529412+0.0*f;
          *b = 1.43137254902-1.12941176471*f;  }
      }     
    }
  }
  else 
  {
    if (f < 0.75) 
    {
      if (f < 0.625)
      {
        if (f < 0.53125) 
        { *r = 0.364705882353+1.00392156863*f;
          *g = 0.733333333333+0.250980392157*f;
          *b = 1.61960784314-1.50588235294*f; }
        else if (f < 0.5625) 
        {*r = 0.43137254902+0.878431372549*f;
          *g = 1.2-0.627450980392*f;
          *b = 1.61960784314-1.50588235294*f;  }
        else if (f < 0.59375) 
        { *r = 0.572549019608+0.627450980392*f;
          *g = 1.2-0.627450980392*f;
          *b = 1.61960784314-1.50588235294*f; }
        else 
        {*r = 0.647058823529+0.501960784314*f;
          *g = 1.34901960784-0.878431372549*f;
          *b = 1.61960784314-1.50588235294*f;  }
      }
      else
      {
        if (f < 0.65625) 
        {*r = 0.803921568627+0.250980392157*f;
          *g = 1.42745098039-1.00392156863*f;
          *b = 1.69803921569-1.63137254902*f;  }
        else if (f < 0.6875) 
        { *r = 0.96862745098+0.0*f;
          *g = 1.50980392157-1.12941176471*f;
          *b = 1.61568627451-1.50588235294*f; }
        else if (f < 0.71875) 
        { *r = 0.96862745098+0.0*f;
          *g = 1.59607843137-1.25490196078*f;
          *b = 1.70196078431-1.63137254902*f; }
        else 
        {*r = 1.23921568627-0.376470588235*f;
          *g = 1.6862745098-1.38039215686*f;
          *b = 1.61176470588-1.50588235294*f;  }
      }
    }
    else
    {
      if (f < 0.875)
      {
        if (f < 0.78125) 
        { *r = 1.23921568627-0.376470588235*f;
          *g = 1.78039215686-1.50588235294*f;
          *b = 1.61176470588-1.50588235294*f; }
        else if (f < 0.8125) 
        {*r = 1.43529411765-0.627450980392*f;
          *g = 1.87843137255-1.63137254902*f;
          *b = 1.61176470588-1.50588235294*f; }
        else if (f < 0.84375) 
        { *r = 1.63921568627-0.878431372549*f;
          *g = 1.98039215686-1.7568627451*f;
          *b = 1.50980392157-1.38039215686*f; }
        else 
        {*r = 1.63921568627-0.878431372549*f;
          *g = 2.0862745098-1.88235294118*f;
          *b = 1.50980392157-1.38039215686*f;  }
      }
      else
      {
        if (f < 0.900625) 
        { *r = 1.85882352941-1.12941176471*f;
          *g = 2.19607843137-2.00784313725*f;
          *b = 1.50980392157-1.38039215686*f; }
        else if (f < 0.9375) 
        {*r = 1.97254901961-1.25490196078*f;
          *g = 4.2431372549-4.26666666667*f;
          *b = 1.39607843137-1.25490196078*f;  }
        else if (f < 0.96875) 
        {*r = 2.09019607843-1.38039215686*f;
          *g = 2.83137254902-2.76078431373*f;
          *b = 1.27843137255-1.12941176471*f;  }
        else 
        {*r = 2.21176470588-1.50588235294*f;
          *g = 4.53333333333-4.51764705882*f;
          *b = 1.27843137255-1.12941176471*f;  }
      }
    }
  }
}

// Retourne une couleur complementaire
// IN: r,g,b
// OUT: ro,go,bo complementaire
void complementColor(float r, float g, float b,
                     float& ro, float& go, float& bo)
{
  // passage HSL; H entre 0 et 360,S et L entre 0 et 1.
  float Cmax = std::max(r,std::max(g,b));
  float Cmin = std::min(r,std::min(g,b));
  float delta = Cmax-Cmin;
  float H = 0.;
  if (delta == 0.) H = 0.;
  else if (Cmax == r) H = std::fmod((g-b)/delta, (float)6.) * 60.;
  else if (Cmax == g) H = (2.+(b-r)/delta) * 60.;
  else H = (4.+(r-g)/delta) * 60.;
  float L = (Cmax+Cmin)*0.5;
  float S = 0.;
  if (delta == 0.) S = 0.;
  else S = delta/(1.-std::abs(Cmax+Cmin-1.));
  //printf("HSL %f %f %f\n",H,S,L);
  
  // decalage teinte 
  H = H+180.;
  if (H > 360.) H = H-360.;
  if (L+0.2 > 1.) L = 1.-L;
  else L = L+0.2;

  // retour RGB
  float C = (1.-std::abs(2.*L-1.))*S;
  float X = C*(1.-std::abs(std::fmod(H/60.,2.) -1.));
  float m = L - 0.5*C;
  float r1,g1,b1;
  if (H >= 300.)      { r1 = C;  g1 = 0.; b1 = X; }
  else if (H >= 240.) { r1 = X;  g1 = 0.; b1 = C; }
  else if (H >= 180.) { r1 = 0.; g1 = X;  b1 = C; }
  else if (H >= 120.) { r1 = 0.; g1 = C;  b1 = X; }
  else if (H >= 60.)  { r1 = X;  g1 = C;  b1 = 0.; }
  else                { r1 = C;  g1 = X;  b1 = 0.; }

  ro = r1+m;
  go = g1+m;
  bo = b1+m;
}
//============================================================================
/*
  Tri-color colormap with RGB interpolation
*/
//============================================================================
void col3RGB(Data* d, double f, float* r, float* g, float* b)
{
  float r1 = d->ptrState->colormapR1;
  float g1 = d->ptrState->colormapG1;
  float b1 = d->ptrState->colormapB1;
  float r2 = d->ptrState->colormapR2;
  float g2 = d->ptrState->colormapG2;
  float b2 = d->ptrState->colormapB2;
  float r3 = d->ptrState->colormapR3;
  float g3 = d->ptrState->colormapG3;
  float b3 = d->ptrState->colormapB3;
  
  if (f < 0.5)
  {
    f = 2.*f;
    *r = (1.-f)*r1+f*r3;
    *g = (1.-f)*g1+f*g3;
    *b = (1.-f)*b1+f*b3;
  }
  else
  {
    
    f = 2.*f-1.;
    *r = (1.-f)*r3+f*r2;
    *g = (1.-f)*g3+f*g2;
    *b = (1.-f)*b3+f*b2; 
  }  
}

//============================================================================
/*
  Tri-color colormap with HSV interpolation
*/
//============================================================================
void col3HSV(Data* d, double f, float* r, float* g, float* b)
{
  float r1 = d->ptrState->colormapR1;
  float g1 = d->ptrState->colormapG1;
  float b1 = d->ptrState->colormapB1;
  float r2 = d->ptrState->colormapR2;
  float g2 = d->ptrState->colormapG2;
  float b2 = d->ptrState->colormapB2;
  float r3 = d->ptrState->colormapR3;
  float g3 = d->ptrState->colormapG3;
  float b3 = d->ptrState->colormapB3;
  float h1,s1,v1,h2,v2,s2,h3,v3,s3,h,s,v,ro,go,bo;
  float delta, delta1, delta2;
  d->rgb2hsv(r1,g1,b1,h1,s1,v1);
  d->rgb2hsv(r2,g2,b2,h2,s2,v2);
  d->rgb2hsv(r3,g3,b3,h3,s3,v3);
  
  if (f < 0.5)
  {
    delta = fabs(h3-h1);
    delta1 = fabs(h3-h1-360.);
    delta2 = fabs(h3-h1+360.);
    if (delta1 < delta) h3 += -360.;
    else if (delta2 < delta) h3 += 360.;
    f = 2*f;
    h = (1.-f)*h1+f*h3;
    s = (1.-f)*s1+f*s3;
    v = (1.-f)*v1+f*v3;
    if (h < 0) h += 360.;
    else if (h > 360.) h += -360.;
    d->hsv2rgb(h,s,v,ro,go,bo);
    *r = (float)ro;
    *g = (float)go;
    *b = (float)bo;
  }
  else
  {
    delta = fabs(h2-h3);
    delta1 = fabs(h2-h3-360.);
    delta2 = fabs(h2-h3+360.);
    if (delta1 < delta) h2 += -360.;
    else if (delta2 < delta) h2 += 360.;
    f = 2*f-1.;
    h = (1.-f)*h3+f*h2;
    s = (1.-f)*s3+f*s2;
    v = (1.-f)*v3+f*v2;
    if (h < 0) h += 360.;
    else if (h > 360.) h += -360.;
    d->hsv2rgb(h,s,v,ro,go,bo);
    *r = (float)ro;
    *g = (float)go;
    *b = (float)bo; 
  }
}
//============================================================================
/*
  Multi-color colormap with RGB interpolation
*/
//============================================================================
void colMRGB(Data* d, double f, float* r, float* g, float* b)
{
  float* pr = d->ptrState->colormapR;
  float* pg = d->ptrState->colormapG;
  float* pb = d->ptrState->colormapB;
  int size = d->ptrState->colormapSize;
  float dsize = 1./(size-1.);
  int i0 = int((size-1.)*f);
  int i1 = MIN(i0+1, size-1);
  double fl = (f-i0*dsize)/dsize;
        
  *r = (1.-fl)*pr[i0]+fl*pr[i1];
  *g = (1.-fl)*pg[i0]+fl*pg[i1];
  *b = (1.-fl)*pb[i0]+fl*pb[i1];
}
//============================================================================
void colMHSV(Data* d, double f, float* r, float* g, float* b)
{
  float* pr = d->ptrState->colormapR;
  float* pg = d->ptrState->colormapG;
  float* pb = d->ptrState->colormapB;
  int size = d->ptrState->colormapSize;

  float h0,s0,v0,h1,v1,s1;
  float h,s,v,ro,go,bo;
  float delta, delta1, delta2;

  int i0 = int((size-1.)*f);
  int i1 = MIN(i0+1, size-1);
  
  d->rgb2hsv(pr[i0],pg[i0],pb[i0], h0,s0,v0);
  d->rgb2hsv(pr[i1],pg[i1],pb[i1], h1,s1,v1);
  delta = fabs(h1-h0);
  delta1 = fabs(h1-h0-360.);
  delta2 = fabs(h1-h0+360.);
  if (delta1 < delta) h1 += -360.;
  else if (delta2 < delta) h1 += 360.;
  h = (1.-f)*h0+f*h1;
  s = (1.-f)*s0+f*s1;
  v = (1.-f)*v0+f*v1;
  if (h < 0) h += 360.;
  else if (h > 360.) h += -360.;
  d->hsv2rgb(h,s,v,ro,go,bo);
  *r = ro; *g = go; *b = bo;
}
//============================================================================
/*
  Init Viridis colormap
*/
//============================================================================
void Data::initViridis()
{
  _colormapSizeViridis = 100;
  _colormapRViridis = new float [100];
  _colormapGViridis = new float [100];
  _colormapBViridis = new float [100];
  
  float* pr = _colormapRViridis;
  float* pg = _colormapGViridis;
  float* pb = _colormapBViridis;
  pr[0]=0.267004; pg[0]=0.004874; pb[0]=0.329415;
  pr[1]=0.269944; pg[1]=0.014625; pb[1]=0.341379;
  pr[2]=0.273809; pg[2]=0.031497; pb[2]=0.358853;
  pr[3]=0.276022; pg[3]=0.044167; pb[3]=0.370164;
  pr[4]=0.278791; pg[4]=0.062145; pb[4]=0.386592;
  pr[5]=0.280267; pg[5]=0.073417; pb[5]=0.397163;
  pr[6]=0.281924; pg[6]=0.089666; pb[6]=0.412415;
  pr[7]=0.282910; pg[7]=0.105393; pb[7]=0.426902;
  pr[8]=0.283197; pg[8]=0.115680; pb[8]=0.436115;
  pr[9]=0.283072; pg[9]=0.130895; pb[9]=0.449241;
  pr[10]=0.282623; pg[10]=0.140926; pb[10]=0.457517;
  pr[11]=0.281412; pg[11]=0.155834; pb[11]=0.469201;
  pr[12]=0.279574; pg[12]=0.170599; pb[12]=0.479997;
  pr[13]=0.278012; pg[13]=0.180367; pb[13]=0.486697;
  pr[14]=0.275191; pg[14]=0.194905; pb[14]=0.496005;
  pr[15]=0.273006; pg[15]=0.204520; pb[15]=0.501721;
  pr[16]=0.269308; pg[16]=0.218818; pb[16]=0.509577;
  pr[17]=0.266580; pg[17]=0.228262; pb[17]=0.514349;
  pr[18]=0.262138; pg[18]=0.242286; pb[18]=0.520837;
  pr[19]=0.257322; pg[19]=0.256130; pb[19]=0.526563;
  pr[20]=0.253935; pg[20]=0.265254; pb[20]=0.529983;
  pr[21]=0.248629; pg[21]=0.278775; pb[21]=0.534556;
  pr[22]=0.244972; pg[22]=0.287675; pb[22]=0.537260;
  pr[23]=0.239346; pg[23]=0.300855; pb[23]=0.540844;
  pr[24]=0.233603; pg[24]=0.313828; pb[24]=0.543914;
  pr[25]=0.229739; pg[25]=0.322361; pb[25]=0.545706;
  pr[26]=0.223925; pg[26]=0.334994; pb[26]=0.548053;
  pr[27]=0.220057; pg[27]=0.343307; pb[27]=0.549413;
  pr[28]=0.214298; pg[28]=0.355619; pb[28]=0.551184;
  pr[29]=0.210503; pg[29]=0.363727; pb[29]=0.552206;
  pr[30]=0.204903; pg[30]=0.375746; pb[30]=0.553533;
  pr[31]=0.199430; pg[31]=0.387607; pb[31]=0.554642;
  pr[32]=0.195860; pg[32]=0.395433; pb[32]=0.555276;
  pr[33]=0.190631; pg[33]=0.407061; pb[33]=0.556089;
  pr[34]=0.187231; pg[34]=0.414746; pb[34]=0.556547;
  pr[35]=0.182256; pg[35]=0.426184; pb[35]=0.557120;
  pr[36]=0.177423; pg[36]=0.437527; pb[36]=0.557565;
  pr[37]=0.174274; pg[37]=0.445044; pb[37]=0.557792;
  pr[38]=0.169646; pg[38]=0.456262; pb[38]=0.558030;
  pr[39]=0.166617; pg[39]=0.463708; pb[39]=0.558119;
  pr[40]=0.162142; pg[40]=0.474838; pb[40]=0.558140;
  pr[41]=0.157729; pg[41]=0.485932; pb[41]=0.558013;
  pr[42]=0.154815; pg[42]=0.493313; pb[42]=0.557840;
  pr[43]=0.150476; pg[43]=0.504369; pb[43]=0.557430;
  pr[44]=0.147607; pg[44]=0.511733; pb[44]=0.557049;
  pr[45]=0.143343; pg[45]=0.522773; pb[45]=0.556295;
  pr[46]=0.140536; pg[46]=0.530132; pb[46]=0.555659;
  pr[47]=0.136408; pg[47]=0.541173; pb[47]=0.554483;
  pr[48]=0.132444; pg[48]=0.552216; pb[48]=0.553018;
  pr[49]=0.129933; pg[49]=0.559582; pb[49]=0.551864;
  pr[50]=0.126453; pg[50]=0.570633; pb[50]=0.549841;
  pr[51]=0.124395; pg[51]=0.578002; pb[51]=0.548287;
  pr[52]=0.121831; pg[52]=0.589055; pb[52]=0.545623;
  pr[53]=0.120092; pg[53]=0.600104; pb[53]=0.542530;
  pr[54]=0.119512; pg[54]=0.607464; pb[54]=0.540218;
  pr[55]=0.119699; pg[55]=0.618490; pb[55]=0.536347;
  pr[56]=0.120638; pg[56]=0.625828; pb[56]=0.533488;
  pr[57]=0.123444; pg[57]=0.636809; pb[57]=0.528763;
  pr[58]=0.126326; pg[58]=0.644107; pb[58]=0.525311;
  pr[59]=0.132268; pg[59]=0.655014; pb[59]=0.519661;
  pr[60]=0.140210; pg[60]=0.665859; pb[60]=0.513427;
  pr[61]=0.146616; pg[61]=0.673050; pb[61]=0.508936;
  pr[62]=0.157851; pg[62]=0.683765; pb[62]=0.501686;
  pr[63]=0.166383; pg[63]=0.690856; pb[63]=0.496502;
  pr[64]=0.180653; pg[64]=0.701402; pb[64]=0.488189;
  pr[65]=0.196571; pg[65]=0.711827; pb[65]=0.479221;
  pr[66]=0.208030; pg[66]=0.718701; pb[66]=0.472873;
  pr[67]=0.226397; pg[67]=0.728888; pb[67]=0.462789;
  pr[68]=0.239374; pg[68]=0.735588; pb[68]=0.455688;
  pr[69]=0.259857; pg[69]=0.745492; pb[69]=0.444467;
  pr[70]=0.281477; pg[70]=0.755203; pb[70]=0.432552;
  pr[71]=0.296479; pg[71]=0.761561; pb[71]=0.424223;
  pr[72]=0.319809; pg[72]=0.770914; pb[72]=0.411152;
  pr[73]=0.335885; pg[73]=0.777018; pb[73]=0.402049;
  pr[74]=0.360741; pg[74]=0.785964; pb[74]=0.387814;
  pr[75]=0.377779; pg[75]=0.791781; pb[75]=0.377939;
  pr[76]=0.404001; pg[76]=0.800275; pb[76]=0.362552;
  pr[77]=0.430983; pg[77]=0.808473; pb[77]=0.346476;
  pr[78]=0.449368; pg[78]=0.813768; pb[78]=0.335384;
  pr[79]=0.477504; pg[79]=0.821444; pb[79]=0.318195;
  pr[80]=0.496615; pg[80]=0.826376; pb[80]=0.306377;
  pr[81]=0.525776; pg[81]=0.833491; pb[81]=0.288127;
  pr[82]=0.555484; pg[82]=0.840254; pb[82]=0.269281;
  pr[83]=0.575563; pg[83]=0.844566; pb[83]=0.256415;
  pr[84]=0.606045; pg[84]=0.850733; pb[84]=0.236712;
  pr[85]=0.626579; pg[85]=0.854645; pb[85]=0.223353;
  pr[86]=0.657642; pg[86]=0.860219; pb[86]=0.203082;
  pr[87]=0.678489; pg[87]=0.863742; pb[87]=0.189503;
  pr[88]=0.709898; pg[88]=0.868751; pb[88]=0.169257;
  pr[89]=0.741388; pg[89]=0.873449; pb[89]=0.149561;
  pr[90]=0.762373; pg[90]=0.876424; pb[90]=0.137064;
  pr[91]=0.793760; pg[91]=0.880678; pb[91]=0.120005;
  pr[92]=0.814576; pg[92]=0.883393; pb[92]=0.110347;
  pr[93]=0.845561; pg[93]=0.887322; pb[93]=0.099702;
  pr[94]=0.876168; pg[94]=0.891125; pb[94]=0.095250;
  pr[95]=0.896320; pg[95]=0.893616; pb[95]=0.096335;
  pr[96]=0.926106; pg[96]=0.897330; pb[96]=0.104071;
  pr[97]=0.945636; pg[97]=0.899815; pb[97]=0.112838;
  pr[98]=0.974417; pg[98]=0.903590; pb[98]=0.130215;
  pr[99]=0.993248; pg[99]=0.906157; pb[99]=0.143936;
}
//============================================================================
/*
  Init Inferno colormap
*/
//============================================================================
void Data::initInferno()
{
  _colormapSizeInferno = 100;
  _colormapRInferno = new float [100];
  _colormapGInferno = new float [100];
  _colormapBInferno = new float [100];
  
  float* pr = _colormapRInferno;
  float* pg = _colormapGInferno;
  float* pb = _colormapBInferno;

  pr[0]=0.001462; pg[0]=0.000466; pb[0]=0.013866;
  pr[1]=0.003299; pg[1]=0.002249; pb[1]=0.024239;
  pr[2]=0.007676; pg[2]=0.006136; pb[2]=0.046836;
  pr[3]=0.011663; pg[3]=0.009417; pb[3]=0.063460;
  pr[4]=0.019373; pg[4]=0.015133; pb[4]=0.088767;
  pr[5]=0.025793; pg[5]=0.019331; pb[5]=0.105930;
  pr[6]=0.037668; pg[6]=0.025921; pb[6]=0.132232;
  pr[7]=0.051644; pg[7]=0.032474; pb[7]=0.159254;
  pr[8]=0.061340; pg[8]=0.036590; pb[8]=0.177642;
  pr[9]=0.076637; pg[9]=0.041905; pb[9]=0.205799;
  pr[10]=0.087411; pg[10]=0.044556; pb[10]=0.224813;
  pr[11]=0.104551; pg[11]=0.047008; pb[11]=0.253430;
  pr[12]=0.122908; pg[12]=0.047536; pb[12]=0.281624;
  pr[13]=0.135778; pg[13]=0.046856; pb[13]=0.299776;
  pr[14]=0.155850; pg[14]=0.044559; pb[14]=0.325338;
  pr[15]=0.169575; pg[15]=0.042489; pb[15]=0.340874;
  pr[16]=0.190367; pg[16]=0.039309; pb[16]=0.361447;
  pr[17]=0.204209; pg[17]=0.037632; pb[17]=0.373238;
  pr[18]=0.224763; pg[18]=0.036405; pb[18]=0.388129;
  pr[19]=0.244967; pg[19]=0.037055; pb[19]=0.400007;
  pr[20]=0.258234; pg[20]=0.038571; pb[20]=0.406485;
  pr[21]=0.277850; pg[21]=0.042353; pb[21]=0.414392;
  pr[22]=0.290763; pg[22]=0.045644; pb[22]=0.418637;
  pr[23]=0.309935; pg[23]=0.051407; pb[23]=0.423721;
  pr[24]=0.328921; pg[24]=0.057827; pb[24]=0.427511;
  pr[25]=0.341500; pg[25]=0.062325; pb[25]=0.429425;
  pr[26]=0.360284; pg[26]=0.069247; pb[26]=0.431497;
  pr[27]=0.372768; pg[27]=0.073915; pb[27]=0.432400;
  pr[28]=0.391453; pg[28]=0.080927; pb[28]=0.433109;
  pr[29]=0.403894; pg[29]=0.085580; pb[29]=0.433179;
  pr[30]=0.422549; pg[30]=0.092501; pb[30]=0.432714;
  pr[31]=0.441207; pg[31]=0.099338; pb[31]=0.431594;
  pr[32]=0.453651; pg[32]=0.103848; pb[32]=0.430498;
  pr[33]=0.472328; pg[33]=0.110547; pb[33]=0.428334;
  pr[34]=0.484789; pg[34]=0.114974; pb[34]=0.426548;
  pr[35]=0.503493; pg[35]=0.121575; pb[35]=0.423356;
  pr[36]=0.522206; pg[36]=0.128150; pb[36]=0.419549;
  pr[37]=0.534683; pg[37]=0.132534; pb[37]=0.416667;
  pr[38]=0.553392; pg[38]=0.139134; pb[38]=0.411829;
  pr[39]=0.565854; pg[39]=0.143567; pb[39]=0.408258;
  pr[40]=0.584521; pg[40]=0.150294; pb[40]=0.402385;
  pr[41]=0.603139; pg[41]=0.157151; pb[41]=0.395891;
  pr[42]=0.615513; pg[42]=0.161817; pb[42]=0.391219;
  pr[43]=0.633998; pg[43]=0.168992; pb[43]=0.383704;
  pr[44]=0.646260; pg[44]=0.173914; pb[44]=0.378359;
  pr[45]=0.664540; pg[45]=0.181539; pb[45]=0.369846;
  pr[46]=0.676638; pg[46]=0.186807; pb[46]=0.363849;
  pr[47]=0.694627; pg[47]=0.195021; pb[47]=0.354388;
  pr[48]=0.712396; pg[48]=0.203656; pb[48]=0.344383;
  pr[49]=0.724103; pg[49]=0.209670; pb[49]=0.337424;
  pr[50]=0.741423; pg[50]=0.219112; pb[50]=0.326576;
  pr[51]=0.752794; pg[51]=0.225706; pb[51]=0.319085;
  pr[52]=0.769556; pg[52]=0.236077; pb[52]=0.307485;
  pr[53]=0.785929; pg[53]=0.247056; pb[53]=0.295477;
  pr[54]=0.796607; pg[54]=0.254728; pb[54]=0.287264;
  pr[55]=0.812239; pg[55]=0.266786; pb[55]=0.274661;
  pr[56]=0.822386; pg[56]=0.275197; pb[56]=0.266085;
  pr[57]=0.837165; pg[57]=0.288385; pb[57]=0.252988;
  pr[58]=0.846709; pg[58]=0.297559; pb[58]=0.244113;
  pr[59]=0.860533; pg[59]=0.311892; pb[59]=0.230606;
  pr[60]=0.873741; pg[60]=0.326906; pb[60]=0.216886;
  pr[61]=0.882188; pg[61]=0.337287; pb[61]=0.207628;
  pr[62]=0.894305; pg[62]=0.353399; pb[62]=0.193584;
  pr[63]=0.902003; pg[63]=0.364492; pb[63]=0.184116;
  pr[64]=0.912966; pg[64]=0.381636; pb[64]=0.169755;
  pr[65]=0.923215; pg[65]=0.399359; pb[65]=0.155193;
  pr[66]=0.929644; pg[66]=0.411479; pb[66]=0.145367;
  pr[67]=0.938675; pg[67]=0.430091; pb[67]=0.130438;
  pr[68]=0.944285; pg[68]=0.442772; pb[68]=0.120354;
  pr[69]=0.952075; pg[69]=0.462178; pb[69]=0.105031;
  pr[70]=0.959114; pg[70]=0.482014; pb[70]=0.089499;
  pr[71]=0.963387; pg[71]=0.495462; pb[71]=0.079073;
  pr[72]=0.969163; pg[72]=0.515946; pb[72]=0.063488;
  pr[73]=0.972590; pg[73]=0.529798; pb[73]=0.053324;
  pr[74]=0.977092; pg[74]=0.550850; pb[74]=0.039050;
  pr[75]=0.979666; pg[75]=0.565057; pb[75]=0.031409;
  pr[76]=0.982881; pg[76]=0.586606; pb[76]=0.024661;
  pr[77]=0.985315; pg[77]=0.608422; pb[77]=0.024202;
  pr[78]=0.986502; pg[78]=0.623105; pb[78]=0.027814;
  pr[79]=0.987622; pg[79]=0.645320; pb[79]=0.039886;
  pr[80]=0.987926; pg[80]=0.660250; pb[80]=0.051750;
  pr[81]=0.987714; pg[81]=0.682807; pb[81]=0.072489;
  pr[82]=0.986694; pg[82]=0.705540; pb[82]=0.095694;
  pr[83]=0.985566; pg[83]=0.720782; pb[83]=0.112229;
  pr[84]=0.983196; pg[84]=0.743758; pb[84]=0.138453;
  pr[85]=0.981173; pg[85]=0.759135; pb[85]=0.156863;
  pr[86]=0.977497; pg[86]=0.782258; pb[86]=0.185923;
  pr[87]=0.974638; pg[87]=0.797692; pb[87]=0.206332;
  pr[88]=0.969783; pg[88]=0.820825; pb[88]=0.238686;
  pr[89]=0.964394; pg[89]=0.843848; pb[89]=0.273391;
  pr[90]=0.960626; pg[90]=0.859069; pb[90]=0.298010;
  pr[91]=0.954997; pg[91]=0.881569; pb[91]=0.337475;
  pr[92]=0.951546; pg[92]=0.896226; pb[92]=0.365627;
  pr[93]=0.947594; pg[93]=0.917399; pb[93]=0.410665;
  pr[94]=0.946403; pg[94]=0.937159; pb[94]=0.458592;
  pr[95]=0.947937; pg[95]=0.949318; pb[95]=0.491426;
  pr[96]=0.954529; pg[96]=0.965896; pb[96]=0.540361;
  pr[97]=0.961812; pg[97]=0.975924; pb[97]=0.571925;
  pr[98]=0.976511; pg[98]=0.989753; pb[98]=0.616760;
  pr[99]=0.988362; pg[99]=0.998364; pb[99]=0.644924;
}
//============================================================================
/*
  Init Magma colormap
*/
//============================================================================
void Data::initMagma()
{
  _colormapSizeMagma = 100;
  _colormapRMagma = new float [100];
  _colormapGMagma = new float [100];
  _colormapBMagma = new float [100];
  
  float* pr = _colormapRMagma;
  float* pg = _colormapGMagma;
  float* pb = _colormapBMagma;

  pr[0]=0.001462; pg[0]=0.000466; pb[0]=0.013866;
  pr[1]=0.003279; pg[1]=0.002305; pb[1]=0.023708;
  pr[2]=0.007588; pg[2]=0.006356; pb[2]=0.044973;
  pr[3]=0.011465; pg[3]=0.009828; pb[3]=0.060750;
  pr[4]=0.018815; pg[4]=0.016026; pb[4]=0.084584;
  pr[5]=0.024792; pg[5]=0.020715; pb[5]=0.100676;
  pr[6]=0.035520; pg[6]=0.028397; pb[6]=0.125209;
  pr[7]=0.048062; pg[7]=0.036607; pb[7]=0.150327;
  pr[8]=0.056615; pg[8]=0.042160; pb[8]=0.167446;
  pr[9]=0.069764; pg[9]=0.049726; pb[9]=0.193735;
  pr[10]=0.078815; pg[10]=0.054184; pb[10]=0.211667;
  pr[11]=0.092949; pg[11]=0.059904; pb[11]=0.239164;
  pr[12]=0.107899; pg[12]=0.064335; pb[12]=0.267289;
  pr[13]=0.118405; pg[13]=0.066479; pb[13]=0.286321;
  pr[14]=0.135053; pg[14]=0.068391; pb[14]=0.315000;
  pr[15]=0.146785; pg[15]=0.068738; pb[15]=0.334011;
  pr[16]=0.165308; pg[16]=0.067911; pb[16]=0.361816;
  pr[17]=0.178212; pg[17]=0.066576; pb[17]=0.379497;
  pr[18]=0.198177; pg[18]=0.063862; pb[18]=0.404009;
  pr[19]=0.218512; pg[19]=0.061158; pb[19]=0.425392;
  pr[20]=0.232077; pg[20]=0.059889; pb[20]=0.437695;
  pr[21]=0.252220; pg[21]=0.059415; pb[21]=0.453248;
  pr[22]=0.265447; pg[22]=0.060237; pb[22]=0.461840;
  pr[23]=0.284951; pg[23]=0.063168; pb[23]=0.472451;
  pr[24]=0.304081; pg[24]=0.067835; pb[24]=0.480812;
  pr[25]=0.316654; pg[25]=0.071690; pb[25]=0.485380;
  pr[26]=0.335308; pg[26]=0.078236; pb[26]=0.491024;
  pr[27]=0.347636; pg[27]=0.082946; pb[27]=0.494121;
  pr[28]=0.366012; pg[28]=0.090314; pb[28]=0.497960;
  pr[29]=0.378211; pg[29]=0.095332; pb[29]=0.500067;
  pr[30]=0.396467; pg[30]=0.102902; pb[30]=0.502658;
  pr[31]=0.414709; pg[31]=0.110431; pb[31]=0.504662;
  pr[32]=0.426877; pg[32]=0.115395; pb[32]=0.505714;
  pr[33]=0.445163; pg[33]=0.122724; pb[33]=0.506901;
  pr[34]=0.457386; pg[34]=0.127522; pb[34]=0.507448;
  pr[35]=0.475780; pg[35]=0.134577; pb[35]=0.507921;
  pr[36]=0.494258; pg[36]=0.141462; pb[36]=0.507988;
  pr[37]=0.506629; pg[37]=0.145958; pb[37]=0.507806;
  pr[38]=0.525270; pg[38]=0.152569; pb[38]=0.507192;
  pr[39]=0.537755; pg[39]=0.156894; pb[39]=0.506551;
  pr[40]=0.556571; pg[40]=0.163269; pb[40]=0.505230;
  pr[41]=0.575490; pg[41]=0.169530; pb[41]=0.503466;
  pr[42]=0.588158; pg[42]=0.173652; pb[42]=0.502035;
  pr[43]=0.607238; pg[43]=0.179779; pb[43]=0.499492;
  pr[44]=0.620005; pg[44]=0.183840; pb[44]=0.497524;
  pr[45]=0.639216; pg[45]=0.189921; pb[45]=0.494150;
  pr[46]=0.652056; pg[46]=0.193986; pb[46]=0.491611;
  pr[47]=0.671349; pg[47]=0.200133; pb[47]=0.487358;
  pr[48]=0.690661; pg[48]=0.206384; pb[48]=0.482558;
  pr[49]=0.703532; pg[49]=0.210638; pb[49]=0.479049;
  pr[50]=0.722805; pg[50]=0.217194; pb[50]=0.473316;
  pr[51]=0.735616; pg[51]=0.221713; pb[51]=0.469180;
  pr[52]=0.754737; pg[52]=0.228772; pb[52]=0.462509;
  pr[53]=0.773695; pg[53]=0.236249; pb[53]=0.455289;
  pr[54]=0.786212; pg[54]=0.241514; pb[54]=0.450184;
  pr[55]=0.804752; pg[55]=0.249911; pb[55]=0.442102;
  pr[56]=0.816914; pg[56]=0.255895; pb[56]=0.436461;
  pr[57]=0.834791; pg[57]=0.265540; pb[57]=0.427671;
  pr[58]=0.846416; pg[58]=0.272473; pb[58]=0.421631;
  pr[59]=0.863320; pg[59]=0.283729; pb[59]=0.412403;
  pr[60]=0.879464; pg[60]=0.296125; pb[60]=0.403118;
  pr[61]=0.889731; pg[61]=0.305079; pb[61]=0.397002;
  pr[62]=0.904281; pg[62]=0.319610; pb[62]=0.388137;
  pr[63]=0.913354; pg[63]=0.330052; pb[63]=0.382563;
  pr[64]=0.925937; pg[64]=0.346844; pb[64]=0.374959;
  pr[65]=0.937221; pg[65]=0.364929; pb[65]=0.368567;
  pr[66]=0.944006; pg[66]=0.377643; pb[66]=0.365136;
  pr[67]=0.953099; pg[67]=0.397563; pb[67]=0.361438;
  pr[68]=0.958464; pg[68]=0.411324; pb[68]=0.360014;
  pr[69]=0.965549; pg[69]=0.432519; pb[69]=0.359529;
  pr[70]=0.971582; pg[70]=0.454210; pb[70]=0.361030;
  pr[71]=0.975082; pg[71]=0.468861; pb[71]=0.363111;
  pr[72]=0.979645; pg[72]=0.491014; pb[72]=0.367783;
  pr[73]=0.982279; pg[73]=0.505851; pb[73]=0.371874;
  pr[74]=0.985693; pg[74]=0.528148; pb[74]=0.379371;
  pr[75]=0.987646; pg[75]=0.543015; pb[75]=0.385210;
  pr[76]=0.990138; pg[76]=0.565296; pb[76]=0.395122;
  pr[77]=0.992196; pg[77]=0.587502; pb[77]=0.406299;
  pr[78]=0.993326; pg[78]=0.602275; pb[78]=0.414390;
  pr[79]=0.994738; pg[79]=0.624350; pb[79]=0.427397;
  pr[80]=0.995480; pg[80]=0.639027; pb[80]=0.436607;
  pr[81]=0.996341; pg[81]=0.660969; pb[81]=0.451160;
  pr[82]=0.996925; pg[82]=0.682828; pb[82]=0.466526;
  pr[83]=0.997186; pg[83]=0.697349; pb[83]=0.477182;
  pr[84]=0.997351; pg[84]=0.719089; pb[84]=0.493755;
  pr[85]=0.997341; pg[85]=0.733545; pb[85]=0.505167;
  pr[86]=0.997138; pg[86]=0.755190; pb[86]=0.522806;
  pr[87]=0.996898; pg[87]=0.769591; pb[87]=0.534892;
  pr[88]=0.996369; pg[88]=0.791167; pb[88]=0.553499;
  pr[89]=0.995680; pg[89]=0.812706; pb[89]=0.572645;
  pr[90]=0.995131; pg[90]=0.827052; pb[90]=0.585701;
  pr[91]=0.994222; pg[91]=0.848540; pb[91]=0.605696;
  pr[92]=0.993545; pg[92]=0.862859; pb[92]=0.619299;
  pr[93]=0.992440; pg[93]=0.884330; pb[93]=0.640099;
  pr[94]=0.991332; pg[94]=0.905763; pb[94]=0.661309;
  pr[95]=0.990570; pg[95]=0.920049; pb[95]=0.675675;
  pr[96]=0.989434; pg[96]=0.941470; pb[96]=0.697519;
  pr[97]=0.988717; pg[97]=0.955742; pb[97]=0.712242;
  pr[98]=0.987691; pg[98]=0.977154; pb[98]=0.734536;
  pr[99]=0.987053; pg[99]=0.991438; pb[99]=0.749504;
}
//============================================================================
/*
  Init Plasma colormap
*/
//============================================================================
void Data::initPlasma()
{
  _colormapSizePlasma = 100;
  _colormapRPlasma = new float [100];
  _colormapGPlasma = new float [100];
  _colormapBPlasma = new float [100];
  
  float* pr = _colormapRPlasma;
  float* pg = _colormapGPlasma;
  float* pb = _colormapBPlasma;

  pr[0]=0.050383; pg[0]=0.029803; pb[0]=0.527975;
  pr[1]=0.075353; pg[1]=0.027206; pb[1]=0.538007;
  pr[2]=0.105980; pg[2]=0.024309; pb[2]=0.551368;
  pr[3]=0.123903; pg[3]=0.022878; pb[3]=0.559423;
  pr[4]=0.148607; pg[4]=0.021154; pb[4]=0.570562;
  pr[5]=0.164070; pg[5]=0.020171; pb[5]=0.577478;
  pr[6]=0.186213; pg[6]=0.018803; pb[6]=0.587228;
  pr[7]=0.207435; pg[7]=0.017442; pb[7]=0.596333;
  pr[8]=0.221197; pg[8]=0.016497; pb[8]=0.602083;
  pr[9]=0.241396; pg[9]=0.014979; pb[9]=0.610259;
  pr[10]=0.254627; pg[10]=0.013882; pb[10]=0.615419;
  pr[11]=0.274191; pg[11]=0.012109; pb[11]=0.622722;
  pr[12]=0.293478; pg[12]=0.010213; pb[12]=0.629490;
  pr[13]=0.306210; pg[13]=0.008902; pb[13]=0.633694;
  pr[14]=0.325150; pg[14]=0.006915; pb[14]=0.639512;
  pr[15]=0.337683; pg[15]=0.005618; pb[15]=0.643049;
  pr[16]=0.356359; pg[16]=0.003798; pb[16]=0.647810;
  pr[17]=0.368733; pg[17]=0.002724; pb[17]=0.650601;
  pr[18]=0.387183; pg[18]=0.001434; pb[18]=0.654177;
  pr[19]=0.405503; pg[19]=0.000678; pb[19]=0.656977;
  pr[20]=0.417642; pg[20]=0.000564; pb[20]=0.658390;
  pr[21]=0.435734; pg[21]=0.001127; pb[21]=0.659797;
  pr[22]=0.447714; pg[22]=0.002080; pb[22]=0.660240;
  pr[23]=0.465550; pg[23]=0.004545; pb[23]=0.660139;
  pr[24]=0.483210; pg[24]=0.008460; pb[24]=0.659095;
  pr[25]=0.494877; pg[25]=0.011990; pb[25]=0.657865;
  pr[26]=0.512206; pg[26]=0.018833; pb[26]=0.655209;
  pr[27]=0.523633; pg[27]=0.024532; pb[27]=0.652901;
  pr[28]=0.540570; pg[28]=0.034950; pb[28]=0.648640;
  pr[29]=0.551715; pg[29]=0.043136; pb[29]=0.645277;
  pr[30]=0.568201; pg[30]=0.055778; pb[30]=0.639477;
  pr[31]=0.584391; pg[31]=0.068579; pb[31]=0.632812;
  pr[32]=0.595011; pg[32]=0.077190; pb[32]=0.627917;
  pr[33]=0.610667; pg[33]=0.090204; pb[33]=0.619951;
  pr[34]=0.620919; pg[34]=0.098934; pb[34]=0.614257;
  pr[35]=0.636008; pg[35]=0.112092; pb[35]=0.605205;
  pr[36]=0.650746; pg[36]=0.125309; pb[36]=0.595617;
  pr[37]=0.660374; pg[37]=0.134144; pb[37]=0.588971;
  pr[38]=0.674522; pg[38]=0.147419; pb[38]=0.578688;
  pr[39]=0.683758; pg[39]=0.156278; pb[39]=0.571660;
  pr[40]=0.697324; pg[40]=0.169573; pb[40]=0.560919;
  pr[41]=0.710549; pg[41]=0.182868; pb[41]=0.550004;
  pr[42]=0.719181; pg[42]=0.191729; pb[42]=0.542663;
  pr[43]=0.731862; pg[43]=0.205013; pb[43]=0.531601;
  pr[44]=0.740143; pg[44]=0.213864; pb[44]=0.524216;
  pr[45]=0.752312; pg[45]=0.227133; pb[45]=0.513149;
  pr[46]=0.760264; pg[46]=0.235976; pb[46]=0.505794;
  pr[47]=0.771958; pg[47]=0.249237; pb[47]=0.494813;
  pr[48]=0.783383; pg[48]=0.262500; pb[48]=0.483918;
  pr[49]=0.790855; pg[49]=0.271345; pb[49]=0.476706;
  pr[50]=0.801855; pg[50]=0.284626; pb[50]=0.465971;
  pr[51]=0.809052; pg[51]=0.293491; pb[51]=0.458870;
  pr[52]=0.819651; pg[52]=0.306812; pb[52]=0.448306;
  pr[53]=0.830018; pg[53]=0.320172; pb[53]=0.437836;
  pr[54]=0.836801; pg[54]=0.329105; pb[54]=0.430905;
  pr[55]=0.846788; pg[55]=0.342551; pb[55]=0.420579;
  pr[56]=0.853319; pg[56]=0.351553; pb[56]=0.413734;
  pr[57]=0.862927; pg[57]=0.365119; pb[57]=0.403519;
  pr[58]=0.869203; pg[58]=0.374212; pb[58]=0.396738;
  pr[59]=0.878423; pg[59]=0.387932; pb[59]=0.386600;
  pr[60]=0.887402; pg[60]=0.401762; pb[60]=0.376494;
  pr[61]=0.893250; pg[61]=0.411048; pb[61]=0.369768;
  pr[62]=0.901807; pg[62]=0.425087; pb[62]=0.359688;
  pr[63]=0.907365; pg[63]=0.434524; pb[63]=0.352970;
  pr[64]=0.915471; pg[64]=0.448807; pb[64]=0.342890;
  pr[65]=0.923287; pg[65]=0.463251; pb[65]=0.332801;
  pr[66]=0.928329; pg[66]=0.472975; pb[66]=0.326067;
  pr[67]=0.935630; pg[67]=0.487712; pb[67]=0.315952;
  pr[68]=0.940313; pg[68]=0.497642; pb[68]=0.309197;
  pr[69]=0.947051; pg[69]=0.512699; pb[69]=0.299049;
  pr[70]=0.953428; pg[70]=0.527960; pb[70]=0.288883;
  pr[71]=0.957469; pg[71]=0.538250; pb[71]=0.282096;
  pr[72]=0.963203; pg[72]=0.553865; pb[72]=0.271909;
  pr[73]=0.966798; pg[73]=0.564396; pb[73]=0.265118;
  pr[74]=0.971835; pg[74]=0.580382; pb[74]=0.254931;
  pr[75]=0.974947; pg[75]=0.591165; pb[75]=0.248151;
  pr[76]=0.979233; pg[76]=0.607532; pb[76]=0.238013;
  pr[77]=0.983041; pg[77]=0.624131; pb[77]=0.227937;
  pr[78]=0.985301; pg[78]=0.635330; pb[78]=0.221265;
  pr[79]=0.988260; pg[79]=0.652325; pb[79]=0.211364;
  pr[80]=0.989935; pg[80]=0.663787; pb[80]=0.204859;
  pr[81]=0.991985; pg[81]=0.681179; pb[81]=0.195295;
  pr[82]=0.993456; pg[82]=0.698810; pb[82]=0.186041;
  pr[83]=0.994103; pg[83]=0.710698; pb[83]=0.180097;
  pr[84]=0.994553; pg[84]=0.728728; pb[84]=0.171622;
  pr[85]=0.994495; pg[85]=0.740880; pb[85]=0.166335;
  pr[86]=0.993851; pg[86]=0.759304; pb[86]=0.159092;
  pr[87]=0.993033; pg[87]=0.771720; pb[87]=0.154808;
  pr[88]=0.991209; pg[88]=0.790537; pb[88]=0.149377;
  pr[89]=0.988648; pg[89]=0.809579; pb[89]=0.145357;
  pr[90]=0.986509; pg[90]=0.822401; pb[90]=0.143557;
  pr[91]=0.982653; pg[91]=0.841812; pb[91]=0.142303;
  pr[92]=0.979644; pg[92]=0.854866; pb[92]=0.142453;
  pr[93]=0.974443; pg[93]=0.874622; pb[93]=0.144061;
  pr[94]=0.968443; pg[94]=0.894564; pb[94]=0.147014;
  pr[95]=0.964021; pg[95]=0.907950; pb[95]=0.149370;
  pr[96]=0.956808; pg[96]=0.928152; pb[96]=0.152409;
  pr[97]=0.951726; pg[97]=0.941671; pb[97]=0.152925;
  pr[98]=0.944152; pg[98]=0.961916; pb[98]=0.146861;
  pr[99]=0.940015; pg[99]=0.975158; pb[99]=0.131326;

}
//============================================================================
/*
  Init Jet colormap
*/
//============================================================================
void Data::initJet()
{
  _colormapSizeJet = 100;
  _colormapRJet = new float [100];
  _colormapGJet = new float [100];
  _colormapBJet = new float [100];
  
  float* pr = _colormapRJet;
  float* pg = _colormapGJet;
  float* pb = _colormapBJet;

  pr[0]=0.000000; pg[0]=0.000000; pb[0]=0.500000;
  pr[1]=0.000000; pg[1]=0.000000; pb[1]=0.545914;
  pr[2]=0.000000; pg[2]=0.000000; pb[2]=0.591827;
  pr[3]=0.000000; pg[3]=0.000000; pb[3]=0.637741;
  pr[4]=0.000000; pg[4]=0.000000; pb[4]=0.683655;
  pr[5]=0.000000; pg[5]=0.000000; pb[5]=0.729568;
  pr[6]=0.000000; pg[6]=0.000000; pb[6]=0.775482;
  pr[7]=0.000000; pg[7]=0.000000; pb[7]=0.821396;
  pr[8]=0.000000; pg[8]=0.000000; pb[8]=0.867309;
  pr[9]=0.000000; pg[9]=0.000000; pb[9]=0.913223;
  pr[10]=0.000000; pg[10]=0.000000; pb[10]=0.959137;
  pr[11]=0.000000; pg[11]=0.000000; pb[11]=1.000000;
  pr[12]=0.000000; pg[12]=0.000000; pb[12]=1.000000;
  pr[13]=0.000000; pg[13]=0.025253; pb[13]=1.000000;
  pr[14]=0.000000; pg[14]=0.065657; pb[14]=1.000000;
  pr[15]=0.000000; pg[15]=0.106061; pb[15]=1.000000;
  pr[16]=0.000000; pg[16]=0.146465; pb[16]=1.000000;
  pr[17]=0.000000; pg[17]=0.186869; pb[17]=1.000000;
  pr[18]=0.000000; pg[18]=0.227273; pb[18]=1.000000;
  pr[19]=0.000000; pg[19]=0.267677; pb[19]=1.000000;
  pr[20]=0.000000; pg[20]=0.308081; pb[20]=1.000000;
  pr[21]=0.000000; pg[21]=0.348485; pb[21]=1.000000;
  pr[22]=0.000000; pg[22]=0.388889; pb[22]=1.000000;
  pr[23]=0.000000; pg[23]=0.429293; pb[23]=1.000000;
  pr[24]=0.000000; pg[24]=0.469697; pb[24]=1.000000;
  pr[25]=0.000000; pg[25]=0.510101; pb[25]=1.000000;
  pr[26]=0.000000; pg[26]=0.550505; pb[26]=1.000000;
  pr[27]=0.000000; pg[27]=0.590909; pb[27]=1.000000;
  pr[28]=0.000000; pg[28]=0.631313; pb[28]=1.000000;
  pr[29]=0.000000; pg[29]=0.671717; pb[29]=1.000000;
  pr[30]=0.000000; pg[30]=0.712121; pb[30]=1.000000;
  pr[31]=0.000000; pg[31]=0.752525; pb[31]=1.000000;
  pr[32]=0.000000; pg[32]=0.792929; pb[32]=1.000000;
  pr[33]=0.000000; pg[33]=0.833333; pb[33]=1.000000;
  pr[34]=0.000000; pg[34]=0.873737; pb[34]=0.988921;
  pr[35]=0.011404; pg[35]=0.914141; pb[35]=0.956338;
  pr[36]=0.043988; pg[36]=0.954545; pb[36]=0.923754;
  pr[37]=0.076572; pg[37]=0.994949; pb[37]=0.891170;
  pr[38]=0.109156; pg[38]=1.000000; pb[38]=0.858586;
  pr[39]=0.141740; pg[39]=1.000000; pb[39]=0.826002;
  pr[40]=0.174324; pg[40]=1.000000; pb[40]=0.793418;
  pr[41]=0.206908; pg[41]=1.000000; pb[41]=0.760834;
  pr[42]=0.239492; pg[42]=1.000000; pb[42]=0.728250;
  pr[43]=0.272076; pg[43]=1.000000; pb[43]=0.695666;
  pr[44]=0.304659; pg[44]=1.000000; pb[44]=0.663082;
  pr[45]=0.337243; pg[45]=1.000000; pb[45]=0.630499;
  pr[46]=0.369827; pg[46]=1.000000; pb[46]=0.597915;
  pr[47]=0.402411; pg[47]=1.000000; pb[47]=0.565331;
  pr[48]=0.434995; pg[48]=1.000000; pb[48]=0.532747;
  pr[49]=0.467579; pg[49]=1.000000; pb[49]=0.500163;
  pr[50]=0.500163; pg[50]=1.000000; pb[50]=0.467579;
  pr[51]=0.532747; pg[51]=1.000000; pb[51]=0.434995;
  pr[52]=0.565331; pg[52]=1.000000; pb[52]=0.402411;
  pr[53]=0.597915; pg[53]=1.000000; pb[53]=0.369827;
  pr[54]=0.630499; pg[54]=1.000000; pb[54]=0.337243;
  pr[55]=0.663082; pg[55]=1.000000; pb[55]=0.304659;
  pr[56]=0.695666; pg[56]=1.000000; pb[56]=0.272076;
  pr[57]=0.728250; pg[57]=1.000000; pb[57]=0.239492;
  pr[58]=0.760834; pg[58]=1.000000; pb[58]=0.206908;
  pr[59]=0.793418; pg[59]=1.000000; pb[59]=0.174324;
  pr[60]=0.826002; pg[60]=1.000000; pb[60]=0.141740;
  pr[61]=0.858586; pg[61]=1.000000; pb[61]=0.109156;
  pr[62]=0.891170; pg[62]=1.000000; pb[62]=0.076572;
  pr[63]=0.923754; pg[63]=1.000000; pb[63]=0.043988;
  pr[64]=0.956338; pg[64]=0.976057; pb[64]=0.011404;
  pr[65]=0.988921; pg[65]=0.938646; pb[65]=0.000000;
  pr[66]=1.000000; pg[66]=0.901235; pb[66]=0.000000;
  pr[67]=1.000000; pg[67]=0.863823; pb[67]=0.000000;
  pr[68]=1.000000; pg[68]=0.826412; pb[68]=0.000000;
  pr[69]=1.000000; pg[69]=0.789001; pb[69]=0.000000;
  pr[70]=1.000000; pg[70]=0.751590; pb[70]=0.000000;
  pr[71]=1.000000; pg[71]=0.714179; pb[71]=0.000000;
  pr[72]=1.000000; pg[72]=0.676768; pb[72]=0.000000;
  pr[73]=1.000000; pg[73]=0.639357; pb[73]=0.000000;
  pr[74]=1.000000; pg[74]=0.601945; pb[74]=0.000000;
  pr[75]=1.000000; pg[75]=0.564534; pb[75]=0.000000;
  pr[76]=1.000000; pg[76]=0.527123; pb[76]=0.000000;
  pr[77]=1.000000; pg[77]=0.489712; pb[77]=0.000000;
  pr[78]=1.000000; pg[78]=0.452301; pb[78]=0.000000;
  pr[79]=1.000000; pg[79]=0.414890; pb[79]=0.000000;
  pr[80]=1.000000; pg[80]=0.377478; pb[80]=0.000000;
  pr[81]=1.000000; pg[81]=0.340067; pb[81]=0.000000;
  pr[82]=1.000000; pg[82]=0.302656; pb[82]=0.000000;
  pr[83]=1.000000; pg[83]=0.265245; pb[83]=0.000000;
  pr[84]=1.000000; pg[84]=0.227834; pb[84]=0.000000;
  pr[85]=1.000000; pg[85]=0.190423; pb[85]=0.000000;
  pr[86]=1.000000; pg[86]=0.153012; pb[86]=0.000000;
  pr[87]=1.000000; pg[87]=0.115600; pb[87]=0.000000;
  pr[88]=1.000000; pg[88]=0.078189; pb[88]=0.000000;
  pr[89]=0.959137; pg[89]=0.040778; pb[89]=0.000000;
  pr[90]=0.913223; pg[90]=0.003367; pb[90]=0.000000;
  pr[91]=0.867309; pg[91]=0.000000; pb[91]=0.000000;
  pr[92]=0.821396; pg[92]=0.000000; pb[92]=0.000000;
  pr[93]=0.775482; pg[93]=0.000000; pb[93]=0.000000;
  pr[94]=0.729568; pg[94]=0.000000; pb[94]=0.000000;
  pr[95]=0.683655; pg[95]=0.000000; pb[95]=0.000000;
  pr[96]=0.637741; pg[96]=0.000000; pb[96]=0.000000;
  pr[97]=0.591827; pg[97]=0.000000; pb[97]=0.000000;
  pr[98]=0.545914; pg[98]=0.000000; pb[98]=0.000000;
  pr[99]=0.500000; pg[99]=0.000000; pb[99]=0.000000;
}
//============================================================================
/*
  Init Greys colormap
*/
//============================================================================
void Data::initGreys()
{
  _colormapSizeGreys = 100;
  _colormapRGreys = new float [100];
  _colormapGGreys = new float [100];
  _colormapBGreys = new float [100];
  
  float* pr = _colormapRGreys;
  float* pg = _colormapGGreys;
  float* pb = _colormapBGreys;

  pr[0]=1.000000; pg[0]=1.000000; pb[0]=1.000000;
  pr[1]=0.995247; pg[1]=0.995247; pb[1]=0.995247;
  pr[2]=0.990493; pg[2]=0.990493; pb[2]=0.990493;
  pr[3]=0.985740; pg[3]=0.985740; pb[3]=0.985740;
  pr[4]=0.980986; pg[4]=0.980986; pb[4]=0.980986;
  pr[5]=0.976233; pg[5]=0.976233; pb[5]=0.976233;
  pr[6]=0.971480; pg[6]=0.971480; pb[6]=0.971480;
  pr[7]=0.966726; pg[7]=0.966726; pb[7]=0.966726;
  pr[8]=0.961973; pg[8]=0.961973; pb[8]=0.961973;
  pr[9]=0.957219; pg[9]=0.957219; pb[9]=0.957219;
  pr[10]=0.952466; pg[10]=0.952466; pb[10]=0.952466;
  pr[11]=0.947712; pg[11]=0.947712; pb[11]=0.947712;
  pr[12]=0.942959; pg[12]=0.942959; pb[12]=0.942959;
  pr[13]=0.936621; pg[13]=0.936621; pb[13]=0.936621;
  pr[14]=0.929333; pg[14]=0.929333; pb[14]=0.929333;
  pr[15]=0.922044; pg[15]=0.922044; pb[15]=0.922044;
  pr[16]=0.914755; pg[16]=0.914755; pb[16]=0.914755;
  pr[17]=0.907467; pg[17]=0.907467; pb[17]=0.907467;
  pr[18]=0.900178; pg[18]=0.900178; pb[18]=0.900178;
  pr[19]=0.892890; pg[19]=0.892890; pb[19]=0.892890;
  pr[20]=0.885601; pg[20]=0.885601; pb[20]=0.885601;
  pr[21]=0.878313; pg[21]=0.878313; pb[21]=0.878313;
  pr[22]=0.871024; pg[22]=0.871024; pb[22]=0.871024;
  pr[23]=0.863735; pg[23]=0.863735; pb[23]=0.863735;
  pr[24]=0.856447; pg[24]=0.856447; pb[24]=0.856447;
  pr[25]=0.848762; pg[25]=0.848762; pb[25]=0.848762;
  pr[26]=0.839889; pg[26]=0.839889; pb[26]=0.839889;
  pr[27]=0.831016; pg[27]=0.831016; pb[27]=0.831016;
  pr[28]=0.822143; pg[28]=0.822143; pb[28]=0.822143;
  pr[29]=0.813270; pg[29]=0.813270; pb[29]=0.813270;
  pr[30]=0.804397; pg[30]=0.804397; pb[30]=0.804397;
  pr[31]=0.795524; pg[31]=0.795524; pb[31]=0.795524;
  pr[32]=0.786651; pg[32]=0.786651; pb[32]=0.786651;
  pr[33]=0.777778; pg[33]=0.777778; pb[33]=0.777778;
  pr[34]=0.768905; pg[34]=0.768905; pb[34]=0.768905;
  pr[35]=0.760032; pg[35]=0.760032; pb[35]=0.760032;
  pr[36]=0.751159; pg[36]=0.751159; pb[36]=0.751159;
  pr[37]=0.742286; pg[37]=0.742286; pb[37]=0.742286;
  pr[38]=0.730362; pg[38]=0.730362; pb[38]=0.730362;
  pr[39]=0.718004; pg[39]=0.718004; pb[39]=0.718004;
  pr[40]=0.705645; pg[40]=0.705645; pb[40]=0.705645;
  pr[41]=0.693286; pg[41]=0.693286; pb[41]=0.693286;
  pr[42]=0.680927; pg[42]=0.680927; pb[42]=0.680927;
  pr[43]=0.668568; pg[43]=0.668568; pb[43]=0.668568;
  pr[44]=0.656209; pg[44]=0.656209; pb[44]=0.656209;
  pr[45]=0.643850; pg[45]=0.643850; pb[45]=0.643850;
  pr[46]=0.631491; pg[46]=0.631491; pb[46]=0.631491;
  pr[47]=0.619133; pg[47]=0.619133; pb[47]=0.619133;
  pr[48]=0.606774; pg[48]=0.606774; pb[48]=0.606774;
  pr[49]=0.594415; pg[49]=0.594415; pb[49]=0.594415;
  pr[50]=0.582690; pg[50]=0.582690; pb[50]=0.582690;
  pr[51]=0.571598; pg[51]=0.571598; pb[51]=0.571598;
  pr[52]=0.560507; pg[52]=0.560507; pb[52]=0.560507;
  pr[53]=0.549416; pg[53]=0.549416; pb[53]=0.549416;
  pr[54]=0.538324; pg[54]=0.538324; pb[54]=0.538324;
  pr[55]=0.527233; pg[55]=0.527233; pb[55]=0.527233;
  pr[56]=0.516142; pg[56]=0.516142; pb[56]=0.516142;
  pr[57]=0.505051; pg[57]=0.505051; pb[57]=0.505051;
  pr[58]=0.493959; pg[58]=0.493959; pb[58]=0.493959;
  pr[59]=0.482868; pg[59]=0.482868; pb[59]=0.482868;
  pr[60]=0.471777; pg[60]=0.471777; pb[60]=0.471777;
  pr[61]=0.460685; pg[61]=0.460685; pb[61]=0.460685;
  pr[62]=0.449673; pg[62]=0.449673; pb[62]=0.449673;
  pr[63]=0.439216; pg[63]=0.439216; pb[63]=0.439216;
  pr[64]=0.428758; pg[64]=0.428758; pb[64]=0.428758;
  pr[65]=0.418301; pg[65]=0.418301; pb[65]=0.418301;
  pr[66]=0.407843; pg[66]=0.407843; pb[66]=0.407843;
  pr[67]=0.397386; pg[67]=0.397386; pb[67]=0.397386;
  pr[68]=0.386928; pg[68]=0.386928; pb[68]=0.386928;
  pr[69]=0.376471; pg[69]=0.376471; pb[69]=0.376471;
  pr[70]=0.366013; pg[70]=0.366013; pb[70]=0.366013;
  pr[71]=0.355556; pg[71]=0.355556; pb[71]=0.355556;
  pr[72]=0.345098; pg[72]=0.345098; pb[72]=0.345098;
  pr[73]=0.334641; pg[73]=0.334641; pb[73]=0.334641;
  pr[74]=0.324183; pg[74]=0.324183; pb[74]=0.324183;
  pr[75]=0.310873; pg[75]=0.310873; pb[75]=0.310873;
  pr[76]=0.296613; pg[76]=0.296613; pb[76]=0.296613;
  pr[77]=0.282353; pg[77]=0.282353; pb[77]=0.282353;
  pr[78]=0.268093; pg[78]=0.268093; pb[78]=0.268093;
  pr[79]=0.253832; pg[79]=0.253832; pb[79]=0.253832;
  pr[80]=0.239572; pg[80]=0.239572; pb[80]=0.239572;
  pr[81]=0.225312; pg[81]=0.225312; pb[81]=0.225312;
  pr[82]=0.211052; pg[82]=0.211052; pb[82]=0.211052;
  pr[83]=0.196791; pg[83]=0.196791; pb[83]=0.196791;
  pr[84]=0.182531; pg[84]=0.182531; pb[84]=0.182531;
  pr[85]=0.168271; pg[85]=0.168271; pb[85]=0.168271;
  pr[86]=0.154011; pg[86]=0.154011; pb[86]=0.154011;
  pr[87]=0.140701; pg[87]=0.140701; pb[87]=0.140701;
  pr[88]=0.128976; pg[88]=0.128976; pb[88]=0.128976;
  pr[89]=0.117251; pg[89]=0.117251; pb[89]=0.117251;
  pr[90]=0.105526; pg[90]=0.105526; pb[90]=0.105526;
  pr[91]=0.093801; pg[91]=0.093801; pb[91]=0.093801;
  pr[92]=0.082076; pg[92]=0.082076; pb[92]=0.082076;
  pr[93]=0.070351; pg[93]=0.070351; pb[93]=0.070351;
  pr[94]=0.058625; pg[94]=0.058625; pb[94]=0.058625;
  pr[95]=0.046900; pg[95]=0.046900; pb[95]=0.046900;
  pr[96]=0.035175; pg[96]=0.035175; pb[96]=0.035175;
  pr[97]=0.023450; pg[97]=0.023450; pb[97]=0.023450;
  pr[98]=0.011725; pg[98]=0.011725; pb[98]=0.011725;
  pr[99]=0.000000; pg[99]=0.000000; pb[99]=0.000000;

}
//============================================================================
/*
  Init Greens colormap
*/
//============================================================================
void Data::initGreens()
{
  _colormapSizeGreens = 100;
  _colormapRGreens = new float [100];
  _colormapGGreens = new float [100];
  _colormapBGreens = new float [100];
  
  float* pr = _colormapRGreens;
  float* pg = _colormapGGreens;
  float* pb = _colormapBGreens;

  pr[0]=0.968627; pg[0]=0.988235; pb[0]=0.960784;
  pr[1]=0.962923; pg[1]=0.986017; pb[1]=0.954130;
  pr[2]=0.957219; pg[2]=0.983799; pb[2]=0.947475;
  pr[3]=0.951515; pg[3]=0.981581; pb[3]=0.940820;
  pr[4]=0.945811; pg[4]=0.979362; pb[4]=0.934165;
  pr[5]=0.940107; pg[5]=0.977144; pb[5]=0.927510;
  pr[6]=0.934403; pg[6]=0.974926; pb[6]=0.920856;
  pr[7]=0.928699; pg[7]=0.972707; pb[7]=0.914201;
  pr[8]=0.922995; pg[8]=0.970489; pb[8]=0.907546;
  pr[9]=0.917291; pg[9]=0.968271; pb[9]=0.900891;
  pr[10]=0.911586; pg[10]=0.966053; pb[10]=0.894236;
  pr[11]=0.905882; pg[11]=0.963834; pb[11]=0.887582;
  pr[12]=0.900178; pg[12]=0.961616; pb[12]=0.880927;
  pr[13]=0.892097; pg[13]=0.958408; pb[13]=0.872093;
  pr[14]=0.882591; pg[14]=0.954605; pb[14]=0.861953;
  pr[15]=0.873084; pg[15]=0.950802; pb[15]=0.851812;
  pr[16]=0.863577; pg[16]=0.946999; pb[16]=0.841672;
  pr[17]=0.854070; pg[17]=0.943197; pb[17]=0.831531;
  pr[18]=0.844563; pg[18]=0.939394; pb[18]=0.821390;
  pr[19]=0.835056; pg[19]=0.935591; pb[19]=0.811250;
  pr[20]=0.825550; pg[20]=0.931788; pb[20]=0.801109;
  pr[21]=0.816043; pg[21]=0.927986; pb[21]=0.790969;
  pr[22]=0.806536; pg[22]=0.924183; pb[22]=0.780828;
  pr[23]=0.797029; pg[23]=0.920380; pb[23]=0.770687;
  pr[24]=0.787522; pg[24]=0.916578; pb[24]=0.760547;
  pr[25]=0.777382; pg[25]=0.912458; pb[25]=0.750010;
  pr[26]=0.765340; pg[26]=0.907388; pb[26]=0.738285;
  pr[27]=0.753298; pg[27]=0.902317; pb[27]=0.726560;
  pr[28]=0.741256; pg[28]=0.897247; pb[28]=0.714835;
  pr[29]=0.729214; pg[29]=0.892177; pb[29]=0.703110;
  pr[30]=0.717172; pg[30]=0.887106; pb[30]=0.691384;
  pr[31]=0.705130; pg[31]=0.882036; pb[31]=0.679659;
  pr[32]=0.693088; pg[32]=0.876966; pb[32]=0.667934;
  pr[33]=0.681046; pg[33]=0.871895; pb[33]=0.656209;
  pr[34]=0.669004; pg[34]=0.866825; pb[34]=0.644484;
  pr[35]=0.656962; pg[35]=0.861755; pb[35]=0.632759;
  pr[36]=0.644920; pg[36]=0.856684; pb[36]=0.621034;
  pr[37]=0.632878; pg[37]=0.851614; pb[37]=0.609309;
  pr[38]=0.618895; pg[38]=0.845157; pb[38]=0.597584;
  pr[39]=0.604635; pg[39]=0.838503; pb[39]=0.585859;
  pr[40]=0.590374; pg[40]=0.831848; pb[40]=0.574133;
  pr[41]=0.576114; pg[41]=0.825193; pb[41]=0.562408;
  pr[42]=0.561854; pg[42]=0.818538; pb[42]=0.550683;
  pr[43]=0.547594; pg[43]=0.811884; pb[43]=0.538958;
  pr[44]=0.533333; pg[44]=0.805229; pb[44]=0.527233;
  pr[45]=0.519073; pg[45]=0.798574; pb[45]=0.515508;
  pr[46]=0.504813; pg[46]=0.791919; pb[46]=0.503783;
  pr[47]=0.490553; pg[47]=0.785264; pb[47]=0.492058;
  pr[48]=0.476292; pg[48]=0.778610; pb[48]=0.480333;
  pr[49]=0.462032; pg[49]=0.771955; pb[49]=0.468608;
  pr[50]=0.446821; pg[50]=0.764666; pb[50]=0.458784;
  pr[51]=0.430660; pg[51]=0.756744; pb[51]=0.450862;
  pr[52]=0.414498; pg[52]=0.748822; pb[52]=0.442939;
  pr[53]=0.398336; pg[53]=0.740899; pb[53]=0.435017;
  pr[54]=0.382175; pg[54]=0.732977; pb[54]=0.427094;
  pr[55]=0.366013; pg[55]=0.725054; pb[55]=0.419172;
  pr[56]=0.349851; pg[56]=0.717132; pb[56]=0.411250;
  pr[57]=0.333690; pg[57]=0.709210; pb[57]=0.403327;
  pr[58]=0.317528; pg[58]=0.701287; pb[58]=0.395405;
  pr[59]=0.301367; pg[59]=0.693365; pb[59]=0.387483;
  pr[60]=0.285205; pg[60]=0.685443; pb[60]=0.379560;
  pr[61]=0.269043; pg[61]=0.677520; pb[61]=0.371638;
  pr[62]=0.253714; pg[62]=0.669321; pb[62]=0.363755;
  pr[63]=0.244207; pg[63]=0.659180; pb[63]=0.356150;
  pr[64]=0.234700; pg[64]=0.649039; pb[64]=0.348544;
  pr[65]=0.225193; pg[65]=0.638899; pb[65]=0.340939;
  pr[66]=0.215686; pg[66]=0.628758; pb[66]=0.333333;
  pr[67]=0.206179; pg[67]=0.618618; pb[67]=0.325728;
  pr[68]=0.196673; pg[68]=0.608477; pb[68]=0.318122;
  pr[69]=0.187166; pg[69]=0.598336; pb[69]=0.310517;
  pr[70]=0.177659; pg[70]=0.588196; pb[70]=0.302911;
  pr[71]=0.168152; pg[71]=0.578055; pb[71]=0.295306;
  pr[72]=0.158645; pg[72]=0.567914; pb[72]=0.287701;
  pr[73]=0.149138; pg[73]=0.557774; pb[73]=0.280095;
  pr[74]=0.139632; pg[74]=0.547633; pb[74]=0.272490;
  pr[75]=0.128936; pg[75]=0.537968; pb[75]=0.264646;
  pr[76]=0.117845; pg[76]=0.528461; pb[76]=0.256724;
  pr[77]=0.106754; pg[77]=0.518954; pb[77]=0.248802;
  pr[78]=0.095663; pg[78]=0.509447; pb[78]=0.240879;
  pr[79]=0.084571; pg[79]=0.499941; pb[79]=0.232957;
  pr[80]=0.073480; pg[80]=0.490434; pb[80]=0.225035;
  pr[81]=0.062389; pg[81]=0.480927; pb[81]=0.217112;
  pr[82]=0.051297; pg[82]=0.471420; pb[82]=0.209190;
  pr[83]=0.040206; pg[83]=0.461913; pb[83]=0.201268;
  pr[84]=0.029115; pg[84]=0.452406; pb[84]=0.193345;
  pr[85]=0.018023; pg[85]=0.442900; pb[85]=0.185423;
  pr[86]=0.006932; pg[86]=0.433393; pb[86]=0.177500;
  pr[87]=0.000000; pg[87]=0.422579; pb[87]=0.170529;
  pr[88]=0.000000; pg[88]=0.409586; pb[88]=0.165142;
  pr[89]=0.000000; pg[89]=0.396593; pb[89]=0.159754;
  pr[90]=0.000000; pg[90]=0.383601; pb[90]=0.154367;
  pr[91]=0.000000; pg[91]=0.370608; pb[91]=0.148980;
  pr[92]=0.000000; pg[92]=0.357615; pb[92]=0.143593;
  pr[93]=0.000000; pg[93]=0.344623; pb[93]=0.138206;
  pr[94]=0.000000; pg[94]=0.331630; pb[94]=0.132818;
  pr[95]=0.000000; pg[95]=0.318637; pb[95]=0.127431;
  pr[96]=0.000000; pg[96]=0.305645; pb[96]=0.122044;
  pr[97]=0.000000; pg[97]=0.292652; pb[97]=0.116657;
  pr[98]=0.000000; pg[98]=0.279659; pb[98]=0.111270;
  pr[99]=0.000000; pg[99]=0.266667; pb[99]=0.105882;

}