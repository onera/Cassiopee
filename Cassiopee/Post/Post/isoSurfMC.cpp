/*    
    Copyright 2013-2025 Onera.

    This file is part of Cassiopee.

    Cassiopee is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Cassiopee is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Cassiopee.  If not, see <http://www.gnu.org/licenses/>.
*/
#define VERTEXINTERP(nfld, value, f, poscellN, f0, f1, ind0, ind1, fisos, npt) { E_Float alpha, alpha1, val; E_Float df = f1-f0;              \
                                                                                 if (K_FUNC::fEqualZero(df) == true) alpha = 1.;              \
                                                                                 else alpha = (value-f0)/df;                                  \
                                                                                 alpha1 = 1.-alpha;                                           \
                                                                                 for (E_Int j = 1; j <= nfld; j++)                            \
                                                                                   {  val   = alpha1*f(ind0, j)+alpha*f(ind1, j);             \
                                                                                    fisos(npt, j + ithread*nfld) = val;                       \
                                                                                   }                                                          \
                                                                                 if (poscellN != 0)                                           \
                                                                                   { if (f(ind0, poscellN) == 0. || f(ind1, poscellN) == 0.)  \
                                                                                       fisos(npt, poscellN + ithread*nfld) = 0.; }            \
                                                                                 npt++;                                                       \
                                                                                 map_cifi[npt] = 0;      }                                   \
// Build an isoSurf in a volume hexa mesh by marching cube

# include "post.h"
using namespace std;
using namespace K_FLD;

static int edgeTable[256]={
0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0   };
static int triTable[256][16] =
{{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 0
{0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 10
{1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
 {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 20
{3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
{3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
 {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1}, // 30
{4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
 {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 40
{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
{10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
{5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
 {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1}, // 50
{1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
{8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
{2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
{11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
 {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1}, // 60
{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
{11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
 {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1}, // 70
{5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
{6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
{6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
 {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 80
{4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
{3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
 {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1}, // 90
{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
{8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
{10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
{10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
 {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1}, // 100
{3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
{0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
{9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
 {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1}, // 110
{6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
{10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
{10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
{7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1}, // 120
{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
{0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
{7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 130
{8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
{7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
 {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1}, // 140
{10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
{0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
{7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
{9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
{6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
 {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1}, // 150
{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
{8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
{1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
{10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
{10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 160
{0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
{9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
{7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
{7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
 {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1}, // 170
{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
{9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
{0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
{6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
 {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1}, // 180
{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
{5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
{9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
{1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
 {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 190
{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
{5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
{11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
{9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
 {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1}, // 200
 {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1}, 
{9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
{1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
 {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1}, // 210
{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
{2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
{9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
{5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
 {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1}, // 220
{0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
{9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
{1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
{4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
 {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1}, // 230
{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
{2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
{1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
{4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 240
{3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
{0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1}, // 250
{1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
 {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}}; // 255

static int quadTable[256][17] =
{{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 0
 { 0,  8,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  9,  8,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  3,  3,  1,  2, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  2, 10,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 10,  8,  3, 10,  9,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3, 11,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 8, 11,  2,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  9,  0,  0,  2,  3, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 10
 { 1,  9, 11,  2,  9,  8, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  11, 10, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8, 10,  1,  8, 11, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3, 11,  9,  0, 11, 10,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  8, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  7,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  7,  3,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9,  8,  4,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  7,  1,  9,  7,  3,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10,  8,  4,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 20
 { 0,  4,  7,  3,  1,  2, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  0,  2, 10,  8,  4,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 10,  9,  7,  2,  7,  3,  3,  7,  9,  4,  4, -1, -1, -1, -1,-1},
 { 8,  4,  7,  7,  3, 11,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {11,  2,  4,  7,  2,  0,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  0,  1,  1,  8,  4,  7,  7,  2,  3, 11, 11, -1, -1, -1, -1,-1},
 { 4,  7, 11,  9,  9, 11,  2,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3, 11, 10,  1,  7,  8,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1, 4, 11,  10,  1,  0,  4,  4,  7, 11,  4,  4, -1, -1, -1, -1,-1},
 { 4,  7,  8,  8,  9,  0, 11, 10, 11,  0,  3,  3, -1, -1, -1, -1,-1}, // 30
 { 4,  7, 11,  9,  9, 11, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4,  0,  8,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  5,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 8,  3,  5,  4,  3,  1,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10,  9,  5,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  0,  8,  8,  1,  2, 10, 10,  4,  9,  5,  5, -1, -1, -1, -1,-1},
 { 4,  2, 10,  5,  4,  0,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 10,  5,  3,  3,  5,  4,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4,  2,  3, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 40
 { 0,  8, 11,  2,  4,  9,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  5,  4,  2,  3, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  1,  5,  8,  2,  8, 11, 11,  4,  8,  5,  5, -1, -1, -1, -1,-1},
 {10, 1,  3,  11,  9,  5,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9,  5,  5,  0,  8,  1,  1,  8, 11, 10,  1, -1, -1, -1, -1,-1},
 { 5,  4,  0, 11,  5, 11, 10, 10, 11,  0,  3,  3, -1, -1, -1, -1,-1},
 { 5,  4,  8, 10, 10,  8, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  7,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  3,  0,  5,  7,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  7,  8,  1,  5,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 50
 { 1,  5,  7,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1}, 
 { 9,  5,  7,  8, 10,  1,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {10,  1,  2,  2,  9,  5,  3,  0,  5,  7,  3,  3, -1, -1, -1, -1,-1},
 { 8,  0,  2,  5,  8,  5,  7,  7, 10,  5,  2,  2, -1, -1, -1, -1,-1},
 { 2, 10,  5,  3,  3,  5,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  8,  9,  5,  3, 11,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  7,  7,  9,  7,  2,  0,  2,  7, 11, 11, -1, -1, -1, -1,-1},
 { 2,  3, 11, 11,  0,  1,  7,  8,  1,  5,  7,  7, -1, -1, -1, -1,-1},
 {11,  2,  1,  7,  7,  1,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  7,  8,  1, 3, 11,  10, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 60
 { 5,  7,  0,  9,  7, 11,  0,  0,  0,  11, 10, 1, -1, -1, -1, -1,-1},
 {11, 10,  0,  3, 10,  5,  0,  0,  8,  0,  5,  7, -1, -1, -1, -1,-1},
 {11, 10,  5,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {10,  6,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  3,  3,  5, 10,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  0,  1,  1,  5, 10,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  9,  8,  3,  5, 10,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  6,  5,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2,  6,  5,  3,  0,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  0,  6,  5,  0,  2,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 70
 { 5,  9,  8,  2,  5,  2,  6,  6,  3,  2,  8,  8, -1, -1, -1, -1,-1},
 { 2,  3, 11, 11, 10,  6,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8, 11,  2, 10,  6,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9,  2,  3, 11, 11,  5, 10,  6,  6, -1, -1, -1, -1,-1},
 { 5, 10,  6,  6,  1,  9,  2,  2,  2,  9,  8, 11, -1, -1, -1, -1,-1},
 { 6,  5,  3, 11,  5,  1,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8, 11,  5,  0,  5,  1,  1,  5, 11,  6,  6, -1, -1, -1, -1,-1},
 { 3, 11,  6,  0,  0,  6,  5,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 6,  5,  9, 11, 11,  9,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 5, 10,  6,  6,  4,  7,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 80
 { 4,  7,  3,  0,  6,  5, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  9,  0,  0,  5, 10,  6,  6,  8,  4,  7,  7, -1, -1, -1, -1,-1},
 {10,  6,  5,  5,  1,  9,  7,  3,  7,  9,  4,  4, -1, -1, -1, -1,-1},
 { 1,  2,  6,  5,  4,  7,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2,  6,  5,  3,  0,  4,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 8,  4,  7,  7,  0,  6,  5,  9,  0,  2,  6,  6, -1, -1, -1, -1,-1},
 { 7,  3,  9,  4,  3,  2,  9,  9,  5,  9,  2,  6, -1, -1, -1, -1,-1},
 { 3, 11,  2,  2,  7,  8,  4,  4, 10,  6,  5,  5, -1, -1, -1, -1,-1},
 { 5, 10,  6,  6,  2,  4,  7, 11,  4,  2,  0,  0, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9,  4,  7,  8,  8,  2,  3, 11, 11,  5, 10,  6,  6,-1}, // 90
 { 9,  11,  2, 1,  9,  4,  7, 11,  5, 10,  6,  6, -1, -1, -1, -1,-1},
 { 8,  4,  7,  7,  1,  3, 11,  5,  5, 11,  6,  6, -1, -1, -1, -1,-1},
 { 1,  11,  6, 5,  1,  0, 11, 11,  0,  4,  7, 11, -1, -1, -1, -1,-1},
 { 0,  6,  5,  9,  0,  3, 11,  6,  8,  4,  7,  7, -1, -1, -1, -1,-1},
 { 6,  5, 9,  11,  4,  7, 11,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9, 10,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9, 10,  6,  0,  8,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1, 10,  6,  6,  4,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  6,  8,  3,  8,  6,  4,  4,  6,  1, 10, 10, -1, -1, -1, -1,-1},
 { 1,  2,  4,  9,  2,  6,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 100
 { 3,  0,  8,  8,  1,  2,  4,  9,  2,  6,  4,  4, -1, -1, -1, -1,-1},
 { 0,  2,  6,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  4,  8,  3,  4,  2,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9, 10,  6, 11,  2,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8, 11,  2,  4,  9, 10,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3, 11,  2,  2,  0,  1,  6,  4,  6,  1, 10, 10, -1, -1, -1, -1,-1}, // autre combinaison possible avec le dernier triangle
 { 1, 10,  6,  4,  4,  8,  1,  1,  1,  8, 11,  2, -1, -1, -1, -1,-1},
 { 9,  6,  4,  4,  3, 11,  6,  9,  9,  1,  3,  3, -1, -1, -1, -1,-1},
 { 8, 11,  1,  0, 11,  6,  1,  1,  1,  6,  4,  9, -1, -1, -1, -1,-1},
 { 0,  3, 11,  6,  0,  6,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 110
 { 4,  8, 11,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 6,  7,  8, 10,  8,  9, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  10,  7, 3,  0,  9, 10, 10,  6,  7, 10, 10, -1, -1, -1, -1,-1},
 { 1, 10,  6,  7,  0,  1,  7,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1, 10,  6,  7,  1,  7,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2,  6,  6,  1,  6,  8,  9,  8,  6,  7,  7, -1, -1, -1, -1,-1},
 { 1,  2,  6,  9,  6,  7,  9,  9,  0,  9,  7,  3, -1,-1, -1, -1, -1},
 { 0,  6,  7,  8,  6,  0,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  6,  7,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  3, 11, 11,  6,  8,  9, 10,  8,  6,  7,  7, -1, -1, -1, -1,-1}, // 120
 { 0,  7, 11,  2,  0,  9, 10,  7,  6,  7, 10, 10, -1, -1, -1, -1,-1},
 { 0,  1,  7,  8,  1, 10,  6,  7,  2,  3, 11, 11, -1, -1, -1, -1,-1},
 { 1,  7, 11,  2,  1, 10,  6,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  6,  8,  9,  8,  6,  7,  7,  1,  3, 11,  6, -1, -1, -1, -1,-1},
 { 0,  9,  1,  1, 11,  6,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  6 , 7,  8,  0,  3, 11,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7, 11,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  6, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  0,  8,  8, 11,  7,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9, 11,  7,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 130
 { 1,  9,  8,  3, 11,  7,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {10,  1,  2,  2,  6, 11,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10,  3,  0,  8,  8,  6, 11,  7,  7, -1, -1, -1, -1,-1},
 { 0,  2, 10,  9,  6, 11,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 6, 11,  7,  7,  2,  10,  8, 3, 10,  9,  8,  8, -1, -1, -1, -1,-1},
 { 2,  3,  7,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  7,  6,  6,  2,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  3,  7,  6,  0,  1,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  6,  2,  2,  1,  8,  7,  6,  1,  9,  8,  8, -1, -1, -1, -1,-1},
 { 1, 7,  6,  10,  1,  3,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 140
 { 1, 7,  6,  10,  0,  8,  7,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  3,  7, 10,  0, 10,  9,  9,  6, 10,  7,  7, -1, -1, -1, -1,-1},
 { 6,  10,  8, 7,  8, 10,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 6,  8,  4,  4, 11,  8,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  6, 11,  3,  0,  4,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  6, 11,  8,  9,  0,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  4,  6,  6,  3,  9,  6, 11,  9,  3,  1,  1, -1, -1, -1, -1,-1}, 
 { 4,  6, 11,  8,  2, 10,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10,  0,  6, 11,  3,  0,  4,  6,  6, -1, -1, -1, -1,-1},
 { 4,  6, 11,  8,  0,  2, 10,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 150
 { 2,  10,  9, 3,  9,  4,  3,  3,  3, 4,  6,  11, -1, -1, -1, -1,-1},
 { 8,  2,  3,  3,  2,  8,  4,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  4,  6,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  9,  0,  0,  2,  3,  8,  4,  2,  4,  6,  6, -1, -1, -1, -1,-1},
 { 1,  9,  4,  2,  2,  4,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 8,  1,  3,  3,  8,  4,  6,  6,  6,  10,  1, 8, -1, -1, -1, -1,-1},
 { 0,  6, 10,  1,  6,  0,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  8,  4,  6,  3,  6, 10,  9,  0,  3,  9,  9, -1, -1, -1, -1,-1},
 { 4,  6, 10,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9,  5,  5,  7,  6, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 160
 { 0,  8,  3,  3,  4,  9,  5,  5, 11,  7,  6,  6, -1, -1, -1, -1,-1},
 { 0,  1,  5,  4,  7,  6, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {11,  7,  6,  6,  8,  3,  4,  4,  3,  1,  5,  4, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4, 10,  1,  2,  2,  7,  6, 11, 11, -1, -1, -1, -1,-1},
 { 6, 11,  7,  7,  1,  2, 10, 10,  0,  8,  3,  3,  4,  9,  5,  5,-1},
 { 7,  6, 11, 11,  5,  4, 10, 10,  0,  2, 10,  4, -1, -1, -1, -1,-1},
 { 3,  5,  4,  8,  2, 10,  5,  3, 11,  7,  6,  6, -1, -1, -1, -1,-1},
 { 2,  3,  7,  6,  5,  4,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4,  0,  8,  7,  6,  0,  6,  2,  2, -1, -1, -1, -1,-1},
 { 2,  3,  7,  6,  0,  1,  5,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 170
 { 2,  8,  7,  6,  1,  5,  8,  2,  4,  8,  5,  5, -1, -1, -1, -1,-1},
 { 9,  5,  4,  4,  1, 7,  6,  10,  1,  3,  7,  7, -1, -1, -1, -1,-1},
 { 1, 7,  6,  10,  0,  8,  7,  1,  9,  5,  4,  4, -1, -1, -1, -1,-1},
 { 0,  3, 10,  4,  4, 10,  5,  5,  6, 10,  3,  7, -1, -1, -1, -1,-1},
 { 6, 10,  8,  7,  4,  8, 10,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 5,  6, 11,  9, 11,  8,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  6, 11,  3,  0,  9,  5,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  5, 11,  8,  0,  1,  5,  5,  5,  6, 11, 11, -1, -1, -1, -1,-1},
 { 3,  5,  6, 11,  5,  3,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 10, 10,  5, 11,  8,  9, 11,  5,  6,  6, -1, -1, -1, -1,-1}, // 180
 { 0,  6, 11,  3,  0,  9,  5,  6,  1,  2, 10, 10, -1, -1, -1, -1,-1},
 { 5,  6, 11,  8,  0,  2,  5,  8, 10,  5,  2,  2, -1, -1, -1, -1,-1},
 { 3,  5,  6, 11,  2,  10,  5, 3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  8,  9,  5,  5,  6,  2,  2,  3,  8,  2,  2, -1, -1, -1, -1,-1},
 { 0,  9,  5,  6,  0,  6,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1,  5,  8,  5,  6,  8,  8,  3,  8,  6,  2, -1, -1, -1, -1,-1},
 { 1,  5,  6,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  3,  6, 10,  3,  8,  9,  6,  5,  6,  9,  9, -1, -1, -1, -1,-1},
 { 0,  6, 10,  1,  0,  9,  5,  6, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  3,  8,  8,  5,  6, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 190
 {10,  5,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  5, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  5, 10, 11,  0,  8,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  5, 10, 11,  1,  9,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 7,  5, 10, 11,  1,  9,  8,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 11,  7,  7,  5,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  3,  3,  1,  2, 11,  7,  1,  7,  5,  5, -1, -1, -1, -1,-1},
 { 9,  7,  5,  5,  2, 11,  7, 9,  9,  0,  2,  2, -1, -1, -1, -1,-1},
 { 2,  11,  7, 5,  2,  5,  9,  8,  3,  2,  8,  8, -1, -1, -1, -1,-1},
 { 2, 3,  5,  10,  3,  7,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 200
 { 0,  8,  5,  2,  8,  7,  5,  5, 10,  2,  5,  5, -1, -1, -1, -1,-1},
 { 9,  0,  1,  1,  2, 3,  5,  10,  5,  3,  7,  7, -1, -1, -1, -1,-1},
 { 1,  9,  8,  2,  8,  7,  2,  2,  2, 7,  5,  10, -1, -1, -1, -1,-1},
 { 1,  3,  7,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  7,  1,  1,  7,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  3,  5,  9,  5,  3,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 5,  9,  8,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 5,  8,  4,  4,  5, 10, 11,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 5,  0,  4,  4,  0,  5, 10, 11, 11,  3,  0,  0, -1, -1, -1, -1,-1},
 { 0,  1,  9,  9,  4, 10, 11,  8, 10,  4,  5,  5, -1, -1, -1, -1,-1}, // 210
 { 4,  5, 10, 11, 11,  3,  4,  4,  1,  9,  4,  3, -1, -1, -1, -1,-1},
 { 2,  8,  5,  1,  2, 11,  8,  8,  4,  5,  8,  8, -1, -1, -1, -1,-1},// Combinaison pas super
 { 0,  4, 11,  3,  1,  11, 4,  5,  2, 11,  1,  1, -1, -1, -1, -1,-1},
 { 0,  2,  5,  9,  2, 11,  5,  5,  4,  5, 11,  8, -1, -1, -1, -1,-1},
 { 9,  4,  5,  5,  2, 11,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 3,  5,  10,  3,  8,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  4,  5, 10,  4,  2,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 3,  5,  10,  3,  8,  4,  5,  0,  1,  9,  9, -1, -1, -1, -1,-1},
 { 2, 4,  5,  10,  1,  9,  4,  2, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  8,  4,  5,  3,  5,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 220
 { 0,  4,  5,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  8,  4,  5,  0,  3,  5,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 9,  4,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9, 11,  7,  9, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  8,  3,  3,  4,  9, 11,  7,  9, 10, 11, 11, -1, -1, -1, -1,-1},
 {10, 11,  4,  1,  1,  4,  0,  0,  7,  4, 11, 11, -1, -1, -1, -1,-1},
 { 3,  1,  4,  8,  1, 10,  4,  4, 10, 11,  7,  4, -1, -1, -1, -1,-1},
 { 4,  9, 11,  7,  1,  2, 11,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  9, 11,  7,  1,  2, 11,  9,  0,  8,  3,  3, -1, -1, -1, -1,-1},
 { 2, 11,  7,  4,  2,  4,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 230
 { 2, 11,  7,  4,  2,  4,  8,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2, 7,  9,  10,  2,  3,  7,  7,  7,  4,  9,  9, -1, -1, -1, -1,-1},
 { 4,  9, 10,  7, 10,  2,  7,  7,  0,  8,  7,  2, -1, -1, -1, -1,-1},
 { 2,  3,  7, 10,  7,  4, 10, 10,  0,  1, 10,  4, -1, -1, -1, -1,-1},
 { 1, 10,  2,  2,  8,  7,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  7,  4,  9,  7,  1,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  7,  4,  9,  0,  8,  7,  1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  3,  7,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 4,  8,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 8,  9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 240
 { 0,  9, 11,  3, 11,  9, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  1, 10,  8,  8, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  10, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  2, 11, 11,  1, 11,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  9, 11,  3,  1,  2, 11,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  2, 11,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 3,  2, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  3,  8, 10, 10,  8,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  9, 10,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 2,  3,  8, 10,  0,  1, 10,  8, -1, -1, -1, -1, -1, -1, -1, -1,-1}, // 250
 { 1, 10,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 1,  3,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  9,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 { 0,  3,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1},
 {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1}}; // 255

//=============================================================================
/* Construit une isoSurf dans un maillage hexa */
//=============================================================================
PyObject* K_POST::isoSurfMC(PyObject* self, PyObject* args)
{
  // grid: maillage volumique hexa (x,y,z+sol)
  // field: nom du field dont on cherche l'iso
  // value: valeur de l'iso
  PyObject* grid;
  char* field;
  E_Float value;
  if (!PYPARSETUPLE_(args, O_ S_ R_,
                    &grid, &field, &value))
  {
      return NULL;
  }

  /*----------------------------------------------*/
  /* Extraction des donnees du maillage volumique */ 
  /*----------------------------------------------*/
  FldArrayF* f;
  E_Int nil, njl, nkl;
  FldArrayI* cn = NULL;
  char* eltType0; char* varString0;
  E_Int res = 
    K_ARRAY::getFromArray(grid, varString0, f, nil, njl, nkl, 
                          cn, eltType0, true);

  if (res != 1 && res != 2)
  {
    PyErr_SetString(PyExc_TypeError,
                    "isoSurfMC: input array is invalid.");
    return NULL;
  }
  if (res != 2 || strcmp(eltType0, "HEXA") != 0)
  {
    RELEASESHAREDB(res, grid, f, cn);
    PyErr_SetString(PyExc_TypeError,
                    "isoSurfMC: input array must be HEXA.");
    return NULL;
  }
  
  // Check size of array
  E_Int posx = K_ARRAY::isCoordinateXPresent(varString0);
  E_Int posy = K_ARRAY::isCoordinateYPresent(varString0);
  E_Int posz = K_ARRAY::isCoordinateZPresent(varString0);

  if (posx == -1 || posy == -1 || posz == -1)
  {
    PyErr_SetString(PyExc_TypeError,
                    "isoSurfMC: coordinates not found in array.");
    RELEASESHAREDU(grid, f, cn);
    return NULL;
  }
  posx++; posy++; posz++;
  // position de la variable iso
  E_Int posf = K_ARRAY::isNamePresent(field, varString0);
  if (posf == -1)
  {
    PyErr_SetString(PyExc_TypeError,
                    "isoSurfMC: variable doesn't exist in array.");
    RELEASESHAREDU(grid, f, cn);
    return NULL;
  }
  posf++;

  // Position du cellN eventuellement
  E_Int poscellN = K_ARRAY::isCellNatureField2Present(varString0)+1;

  FldArrayF fiso; FldArrayI ciso;
  doIsoSurfMCQuads(*f, *cn, posf, value, poscellN, fiso, ciso);
  RELEASESHAREDU(grid, f, cn);
  E_Float tolc = 1.e-12; 

  K_CONNECT::cleanConnectivity(posx, posy, posz, tolc, "QUAD", fiso, ciso);

  if (fiso.getSize() == 0 || ciso.getSize() == 0)
  {
    PyErr_SetString(PyExc_ValueError,
                    "isoSurfMC: isosurf is empty.");
    return NULL;
  }

  PyObject* t = K_ARRAY::buildArray(fiso, varString0, ciso, -1, "QUAD");
  return t;
}


//=============================================================================
/* Genere une isoSurface en utilisant des marching cubes avec une sortie TRI
*/
//=============================================================================
void K_POST::doIsoSurfMC(
  FldArrayF& f, FldArrayI& cn, E_Int posf, E_Float value, E_Int poscellN,
  FldArrayF& fiso, FldArrayI& ciso)
{
  E_Int nelts = cn.getSize();
  E_Int nfld = f.getNfld();
  E_Float f0, f1, f2, f3, f4, f5, f6, f7;
  E_Int ind0, ind1, ind2, ind3, ind4, ind5, ind6, ind7;
  int cubeindex;

  E_Int nptsSize = nelts;
  E_Int ntriSize = nelts;
  fiso.malloc(nptsSize, nfld);
  ciso.malloc(ntriSize, 3);
  E_Int ntri = 0; // nombre de tri dans l'iso
  E_Int npts = 0; // nombre de pts dans l'iso
  E_Float* fp = f.begin(posf);
  E_Int* ciso1 = ciso.begin(1);
  E_Int* ciso2 = ciso.begin(2);
  E_Int* ciso3 = ciso.begin(3);
  E_Int* cn1 = cn.begin(1); E_Int* cn2 = cn.begin(2); 
  E_Int* cn3 = cn.begin(3); E_Int* cn4 = cn.begin(4);
  E_Int* cn5 = cn.begin(5); E_Int* cn6 = cn.begin(6); 
  E_Int* cn7 = cn.begin(7); E_Int* cn8 = cn.begin(8);

  int indir[12];
  int edgeVal;
  int *tt;

  for (E_Int i = 0; i < nelts; i++)
  {
    ind0 = cn1[i]-1; ind1 = cn2[i]-1; ind2 = cn3[i]-1; 
    ind3 = cn4[i]-1; ind4 = cn5[i]-1; ind5 = cn6[i]-1;
    ind6 = cn7[i]-1; ind7 = cn8[i]-1;

    f0 = fp[ind0]; f1 = fp[ind1];
    f2 = fp[ind2]; f3 = fp[ind3];
    f4 = fp[ind4]; f5 = fp[ind5];
    f6 = fp[ind6]; f7 = fp[ind7];
    
    cubeindex = 0;
    if (f0 < value) cubeindex |= 1;
    if (f1 < value) cubeindex |= 2;
    if (f2 < value) cubeindex |= 4;
    if (f3 < value) cubeindex |= 8;
    if (f4 < value) cubeindex |= 16;
    if (f5 < value) cubeindex |= 32;
    if (f6 < value) cubeindex |= 64;
    if (f7 < value) cubeindex |= 128;

    //nptsSav = npts;
    edgeVal = edgeTable[cubeindex]; 
    tt = triTable[cubeindex];

    /* Cube is entirely in/out of the surface */
    if (edgeVal == 0) goto end;
    
    /* Find the vertices where the surface intersects the cube */
    if (edgeVal & 1)
    {
      vertexInterp(nfld, value, f, poscellN, f0, f1, ind0, ind1, fiso, npts);
      indir[0] = npts; //-nptsSav; 
    }
    if (edgeVal & 2)
    {
      vertexInterp(nfld, value, f, poscellN, f1, f2, ind1, ind2, fiso, npts);
      indir[1] = npts; //-nptsSav; 
    }
    if (edgeVal & 4)
    {
      vertexInterp(nfld, value, f, poscellN, f2, f3, ind2, ind3, fiso, npts);
      indir[2] = npts; //-nptsSav; 
    }
    if (edgeVal & 8)
    {
      vertexInterp(nfld, value, f, poscellN, f3, f0, ind3, ind0, fiso, npts);
      indir[3] = npts; //-nptsSav; 
    }
    if (edgeVal & 16)
    {
      vertexInterp(nfld, value, f, poscellN, f4, f5, ind4, ind5, fiso, npts);
      indir[4] = npts; //-nptsSav; 
    }
    if (edgeVal & 32)
    {
      vertexInterp(nfld, value, f, poscellN, f5, f6, ind5, ind6, fiso, npts);
      indir[5] = npts; //-nptsSav; 
    }
    if (edgeVal & 64)
    {
      vertexInterp(nfld, value, f, poscellN, f6, f7, ind6, ind7, fiso, npts);
      indir[6] = npts; //-nptsSav; 
    }
    if (edgeVal & 128)
    {
      vertexInterp(nfld, value, f, poscellN, f7, f4, ind7, ind4, fiso, npts);
      indir[7] = npts; //-nptsSav; 
    }
    if (edgeVal & 256)
    {
      vertexInterp(nfld, value, f, poscellN, f0, f4, ind0, ind4, fiso, npts);
      indir[8] = npts; //-nptsSav; 
    }
    if (edgeVal & 512)
    {
      vertexInterp(nfld, value, f, poscellN, f1, f5, ind1, ind5, fiso, npts);
      indir[9] = npts; //-nptsSav; 
    }
    if (edgeVal & 1024)
    {
      vertexInterp(nfld, value, f, poscellN, f2, f6, ind2, ind6, fiso, npts);
      indir[10] = npts; //-nptsSav;
    }
    if (edgeVal & 2048)
    {
      vertexInterp(nfld, value, f, poscellN, f3, f7, ind3, ind7, fiso, npts);
      indir[11] = npts; //-nptsSav;
    }
    /* Create the triangle */
    for (E_Int j=0; tt[j] != -1; j+=3) 
    {
      ciso1[ntri] = indir[tt[j]]; // + nptsSav;
      ciso2[ntri] = indir[tt[j+1]]; // + nptsSav;
      ciso3[ntri] = indir[tt[j+2]]; // + nptsSav;
      ntri++;
    }

    if (npts + 12 >= nptsSize) 
    { nptsSize = nptsSize+nelts; fiso.reAllocMat(nptsSize, nfld); }
    if (ntri + 5 >= ntriSize)
    { ntriSize = ntriSize+nelts; ciso.reAllocMat(ntriSize, 3); 
      ciso1 = ciso.begin(1); ciso2 = ciso.begin(2); ciso3 = ciso.begin(3);}
    end: ;
  }
  fiso.reAllocMat(npts, nfld);
  ciso.reAllocMat(ntri, 3);
}

//=============================================================================
// Genere une isoSurface en utilisant des marching cubes avec une sortie QUAD
//=============================================================================
void K_POST::doIsoSurfMCQuads(
  FldArrayF& f, FldArrayI& cn, E_Int posf, E_Float value, E_Int poscellN,
  FldArrayF& fiso, FldArrayI& ciso)
{
  E_Int nelts = cn.getSize();
  E_Int nfld = f.getNfld();
  E_Float* fp = f.begin(posf);
  E_Int* cn1 = cn.begin(1); E_Int* cn2 = cn.begin(2); 
  E_Int* cn3 = cn.begin(3); E_Int* cn4 = cn.begin(4);
  E_Int* cn5 = cn.begin(5); E_Int* cn6 = cn.begin(6); 
  E_Int* cn7 = cn.begin(7); E_Int* cn8 = cn.begin(8);

  E_Int nthreads = __NUMTHREADS__;
 
  E_Int npartition = 10*nthreads;
  E_Int chunk = nelts/npartition;

  if (chunk==0) { chunk=1; npartition=nelts; }

  // Dimensionnement: npts et ntri (par thread)
  E_Int* nquads = new E_Int [npartition];
  E_Int* npts = new E_Int [npartition];
  
#pragma omp parallel default(shared)
  {
  E_Float f0, f1, f2, f3, f4, f5, f6, f7;
  E_Int ind0, ind1, ind2, ind3, ind4, ind5, ind6, ind7;
  int cubeindex, edgeVal; int* qt;
#pragma omp for schedule(dynamic,1)
  for (E_Int part = 0; part < npartition ; part++)
  {
    E_Int ideb = chunk*part;
    E_Int ifin = chunk*(part+1);
    if (part == npartition-1) {ifin = nelts;}

    E_Int np = 0; E_Int nquad = 0;
    for (E_Int i = ideb; i < ifin; i++)
    {
      ind0 = cn1[i]-1; ind1 = cn2[i]-1; ind2 = cn3[i]-1; 
      ind3 = cn4[i]-1; ind4 = cn5[i]-1; ind5 = cn6[i]-1;
      ind6 = cn7[i]-1; ind7 = cn8[i]-1;

      f0 = fp[ind0]; f1 = fp[ind1];
      f2 = fp[ind2]; f3 = fp[ind3];
      f4 = fp[ind4]; f5 = fp[ind5];
      f6 = fp[ind6]; f7 = fp[ind7];
    
      cubeindex = 0;
      if (f0 < value) cubeindex |= 1;
      if (f1 < value) cubeindex |= 2;
      if (f2 < value) cubeindex |= 4;
      if (f3 < value) cubeindex |= 8;
      if (f4 < value) cubeindex |= 16;
      if (f5 < value) cubeindex |= 32;
      if (f6 < value) cubeindex |= 64;
      if (f7 < value) cubeindex |= 128;

      edgeVal = edgeTable[cubeindex];

      /* Cube is entirely in/out of the surface */
      if (edgeVal == 0) goto endc;
    
      /* Find the vertices where the surface intersects the cube */
      if (edgeVal & 1)    { np += 4; }
      if (edgeVal & 2)    { np += 4; }
      if (edgeVal & 4)    { np += 4; }
      if (edgeVal & 8)    { np += 4; }
      if (edgeVal & 16)   { np += 4; }
      if (edgeVal & 32)   { np += 4; }
      if (edgeVal & 64)   { np += 4; }
      if (edgeVal & 128)  { np += 4; }
      if (edgeVal & 256)  { np += 4; }
      if (edgeVal & 512)  { np += 4; }
      if (edgeVal & 1024) { np += 4; }
      if (edgeVal & 2048) { np += 4; }
      /* Create the quadrangle */
      qt = quadTable[cubeindex];
      for (E_Int j = 0; qt[j] != -1; j += 4)
      {
        nquad++;
      }
      endc:;
    }//loop element
    npts[part] = np;
    nquads[part] = nquad;
  }//loop partition
 }//omp para

  E_Int* prevQ = new E_Int [npartition];
  E_Int* prevF = new E_Int [npartition];
  // rebuild
  E_Int nquad = 0; E_Int npt = 0;
  for (E_Int i = 0; i < npartition; i++) 
  { prevQ[i] = nquad; nquad += nquads[i]; 
    prevF[i] = npt; npt += npts[i]; }

  fiso.malloc(npt, nfld);
  ciso.malloc(nquad, 4);

#pragma omp parallel default(shared)
  {
  E_Float f0, f1, f2, f3, f4, f5, f6, f7;
  E_Int ind0, ind1, ind2, ind3, ind4, ind5, ind6, ind7;
  int cubeindex;

  
  E_Int* ciso1_glob = ciso.begin(1);
  E_Int* ciso2_glob = ciso.begin(2);
  E_Int* ciso3_glob = ciso.begin(3);
  E_Int* ciso4_glob = ciso.begin(4);

  int indir[12]; int* qt;
  E_Int nptSav; int edgeVal;

#pragma omp for schedule(dynamic,1)
  for (E_Int part = 0; part < npartition ; part++)
  {
    E_Int pglob = prevQ[part];
    E_Int fglob = prevF[part];

    E_Int nquad = 0; // locals
    E_Int npt = fglob;

    E_Int ideb = chunk*part;
    E_Int ifin = chunk*(part+1);
    if (part == npartition-1) {ifin = nelts;}

    for (E_Int i = ideb; i < ifin; i++)
    {
      ind0 = cn1[i]-1; ind1 = cn2[i]-1; ind2 = cn3[i]-1; 
      ind3 = cn4[i]-1; ind4 = cn5[i]-1; ind5 = cn6[i]-1;
      ind6 = cn7[i]-1; ind7 = cn8[i]-1;

      f0 = fp[ind0]; f1 = fp[ind1];
      f2 = fp[ind2]; f3 = fp[ind3];
      f4 = fp[ind4]; f5 = fp[ind5];
      f6 = fp[ind6]; f7 = fp[ind7];
    
      cubeindex = 0;
      if (f0 < value) cubeindex |= 1;
      if (f1 < value) cubeindex |= 2;
      if (f2 < value) cubeindex |= 4;
      if (f3 < value) cubeindex |= 8;
      if (f4 < value) cubeindex |= 16;
      if (f5 < value) cubeindex |= 32;
      if (f6 < value) cubeindex |= 64;
      if (f7 < value) cubeindex |= 128;

      nptSav = npt;
      edgeVal = edgeTable[cubeindex];

      /* Cube is entirely in/out of the surface */
      if (edgeVal == 0) goto end;
    
      /* Find the vertices where the surface intersects the cube */
      if (edgeVal & 1)
      {
        vertexInterp(nfld, value, f, poscellN, f0, f1, ind0, ind1, fiso, npt);
        indir[0] = npt-nptSav; 
      }
      if (edgeVal & 2)
      {
        vertexInterp(nfld, value, f, poscellN, f1, f2, ind1, ind2, fiso, npt);
        indir[1] = npt-nptSav; 
      }
      if (edgeVal & 4)
      {
        vertexInterp(nfld, value, f, poscellN, f2, f3, ind2, ind3, fiso, npt);
        indir[2] = npt-nptSav; 
      }
      if (edgeVal & 8)
      {
        vertexInterp(nfld, value, f, poscellN, f3, f0, ind3, ind0, fiso, npt);
        indir[3] = npt-nptSav; 
      }
      if (edgeVal & 16)
      {
        vertexInterp(nfld, value, f, poscellN, f4, f5, ind4, ind5, fiso, npt);
        indir[4] = npt-nptSav; 
      }
      if (edgeVal & 32)
      {
        vertexInterp(nfld, value, f, poscellN, f5, f6, ind5, ind6, fiso, npt);
        indir[5] = npt-nptSav; 
      }
      if (edgeVal & 64)
      {
        vertexInterp(nfld, value, f, poscellN, f6, f7, ind6, ind7, fiso, npt);
        indir[6] = npt-nptSav; 
      }
      if (edgeVal & 128)
      {
        vertexInterp(nfld, value, f, poscellN, f7, f4, ind7, ind4, fiso, npt);
        indir[7] = npt-nptSav; 
      }
      if (edgeVal & 256)
      {
        vertexInterp(nfld, value, f, poscellN, f0, f4, ind0, ind4, fiso, npt);
        indir[8] = npt-nptSav; 
      }
      if (edgeVal & 512)
      {
        vertexInterp(nfld, value, f, poscellN, f1, f5, ind1, ind5, fiso, npt);
        indir[9] = npt-nptSav; 
      }
      if (edgeVal & 1024)
      {
        vertexInterp(nfld, value, f, poscellN, f2, f6, ind2, ind6, fiso, npt);
        indir[10] = npt-nptSav;
      }
      if (edgeVal & 2048)
      {
        vertexInterp(nfld, value, f, poscellN, f3, f7, ind3, ind7, fiso, npt);
        indir[11] = npt-nptSav; 
      }
      /* Create the quadrangle */
      qt = quadTable[cubeindex];
    
      for (E_Int j = 0; qt[j] != -1; j += 4)
      {
        ciso1_glob[nquad + pglob] = nptSav + indir[qt[j  ]] ;
        ciso2_glob[nquad + pglob] = nptSav + indir[qt[j+1]] ;
        ciso3_glob[nquad + pglob] = nptSav + indir[qt[j+2]] ;
        ciso4_glob[nquad + pglob] = nptSav + indir[qt[j+3]] ;
        nquad++;
      }
    end: ;

    }//loop i
  }//loop part
  }//zone omp

  delete [] prevQ; delete [] prevF;
  delete [] npts; delete [] nquads;
}
