#! /bin/bash
# Copy a CASSIOPEE distribution into a destination path with a new prod. name

# Print help message
usage() {
  echo "moveDist --destination=<destination_path>                             # Copy all modules of a CASSIOPEE distribution into a destination path with the same prod. name"
  echo "moveDist --destination=<destination_path> --new-prod-name=<new_prod>  # Copy all modules of a CASSIOPEE distribution into a destination path with a new prod. name"
  echo "moveDist --destination=<destination_path> --module=<module>           # Copy a single module of a CASSIOPEE distribution into a destination path with the same prod. name"
  exit 1
}

# Parse command-line arguments
DEST_PROD_PATH=""
NEW_ELSAPROD=""
while [[ "$1" != "" ]]; do
  case "$1" in
    --destination=*)
      DEST_PROD_PATH="${1#*=}"
      ;;
    -d)
      shift
      DEST_PROD_PATH="$1"
      ;;
    --module=*)
      MODULE="${1#*=}"
      ;;
    -m)
      shift
      MODULE="$1"
      ;;
    --new-prod-name=*)
      NEW_ELSAPROD="${1#*=}"
      ;;
    --help | -h)
      usage
      ;;
    *)
      echo "Invalid argument: $1"
      usage
      ;;
  esac
  shift
done

# Sanitise arguments
if [ -z $MODULE ]; then
  MODULE="all"
fi

if [ -z $NEW_ELSAPROD ]; then
  NEW_ELSAPROD=$ELSAPROD
fi

if [ -z $DEST_PROD_PATH ]; then
  echo ">>> Please set a destination path using --destination=<destination_path>"
  usage
  exit 1
fi

if [ "$CASSIOPEE" = "" ]; then
  echo "You must set a CASSIOPEE variable in your environment."
  echo "This variable specifies the installation path of *Cassiopee*."
  exit 1
fi
if [ "$ELSAPROD" = "" ]; then
  echo "You must set a ELSAPROD in your environment."
  echo "This variable identifies the processor type."
  exit 1
fi

# Setting vars
CWD=$(pwd)
CASSIOPEE=${CASSIOPEE%/}

# The destination path may be located on another machine in which case
# - DEST_PROD_PATH is the actual path on the other machine stripped of the user
#   and machine names
# - TMP_DEST_PROD_PATH is a temporary path located in the CWD
# - BK_DEST_PROD_PATH is a backup containing the user and machine names
if [[ "$DEST_PROD_PATH" == *"@"* ]]; then
  TMP_DEST_PROD_PATH="$CWD/tmp_$NEW_ELSAPROD"
  BK_DEST_PROD_PATH=$DEST_PROD_PATH
  DEST_PROD_PATH="${DEST_PROD_PATH#*:}"
else
  TMP_DEST_PROD_PATH=$DEST_PROD_PATH
  BK_DEST_PROD_PATH=$DEST_PROD_PATH
fi

DEST_CAS_PATH=$(dirname $(dirname $(dirname $DEST_PROD_PATH)))

# Get the path to the site-packages folder
cd "$CASSIOPEE/Dist/bin/$ELSAPROD"
SITE_PACKAGES_PATH=$(find . -maxdepth 2 -type d -name "python*" | sort -V | tail -1)
case $ELSAPROD in
  ubuntu*)
    SITE_PACKAGES_PATH=$SITE_PACKAGES_PATH"/dist-packages"
    ;;
  *)
    SITE_PACKAGES_PATH=$SITE_PACKAGES_PATH"/site-packages"
    ;;
esac
SITE_PACKAGES_PATH="${SITE_PACKAGES_PATH#./}"
PYLIB_PATH=$(dirname $SITE_PACKAGES_PATH)
PYVERSION=$(basename $PYLIB_PATH)
PYLIB_PATH=$(dirname $PYLIB_PATH)

NEW_PYLIB_PATH="lib"
case $NEW_ELSAPROD in
  ubuntu*)
    NEW_PYLIB_PATH="local/"$NEW_PYLIB_PATH
    PYSITE_FOLDER="dist-packages"
    ;;
  *)
    PYSITE_FOLDER="site-packages"
    ;;
esac
NEW_SITE_PACKAGES_PATH="$NEW_PYLIB_PATH/$PYVERSION/$PYSITE_FOLDER"


if [ $MODULE = "all" ]; then
  # Copy all modules to their destination
  cd "$CASSIOPEE/Dist/bin/$ELSAPROD"
  tar --exclude='all.tar' -cvf all.tar .
  mkdir -p $TMP_DEST_PROD_PATH
  mv all.tar $TMP_DEST_PROD_PATH
  cd $TMP_DEST_PROD_PATH
  tar -xvf all.tar
  rm all.tar
  if [ -L lib64 ]; then
    rm lib64
    ln -s lib lib64
  else
    ln -s lib lib64
  fi

  # Edit installPath (replace $CASSIOPEE by $DEST_CAS_PATH and edit prod. name)
  cd "$TMP_DEST_PROD_PATH/$SITE_PACKAGES_PATH/KCore"
  cp "$CASSIOPEE/Dist/bin/$ELSAPROD/$SITE_PACKAGES_PATH/KCore/installPath.py" .
  s1=$(sed 's/[\/&]/\\&/g' <<< "$CASSIOPEE")
  s2=$(sed 's/[\/&]/\\&/g' <<< "$DEST_CAS_PATH")
  sed -i "s/$s1/$s2/g" installPath.py
  if [ "$ELSAPROD" != "$NEW_ELSAPROD" ]; then
    s1=$(sed 's/[\/&]/\\&/g' <<< "$ELSAPROD/$SITE_PACKAGES_PATH")
    s2=$(sed 's/[\/&]/\\&/g' <<< "$NEW_ELSAPROD/$NEW_SITE_PACKAGES_PATH")
    sed -i "s/$s1/$s2/g" installPath.py
    s1=$(sed 's/[\/&]/\\&/g' <<< "$ELSAPROD/$PYLIB_PATH")
    s2=$(sed 's/[\/&]/\\&/g' <<< "$NEW_ELSAPROD/$NEW_PYLIB_PATH")
    sed -i "s/$s1/$s2/g" installPath.py
  fi
  cat installPath.py

  # Copy temporary folder to the other machine
  if [[ "$BK_DEST_PROD_PATH" == *"@"* ]]; then
    scp -r $TMP_DEST_PROD_PATH $BK_DEST_PROD_PATH
    rm -r $TMP_DEST_PROD_PATH
  fi

  # Copy environment files
  if [[ "$BK_DEST_PROD_PATH" == *"@"* ]]; then
    scp "$CASSIOPEE"/Dist/env_* "$BK_DEST_PROD_PATH"/../..
    scp "$CASSIOPEE"/Dist/sh_* "$BK_DEST_PROD_PATH"/../..
  else
    cp "$CASSIOPEE"/Dist/env_* "$DEST_PROD_PATH"/../..
    cp "$CASSIOPEE"/Dist/sh_* "$DEST_PROD_PATH"/../..
  fi
  cd $CWD
else
  # Copy a single module to its destination
  cd "$CASSIOPEE/Dist/bin/$ELSAPROD/$SITE_PACKAGES_PATH"
  tar cvf $MODULE.tar $MODULE
  mkdir -p $TMP_DEST_PROD_PATH
  mv $MODULE.tar $TMP_DEST_PROD_PATH
  cd $TMP_DEST_PROD_PATH
  mkdir -p $SITE_PACKAGES_PATH
  if [ -L lib64 ]; then
    rm lib64
    ln -s lib lib64
  else
    ln -s lib lib64
  fi
  mv $MODULE.tar $SITE_PACKAGES_PATH
  cd $SITE_PACKAGES_PATH
  tar xvf $MODULE.tar
  rm $MODULE.tar
  cd $CWD
fi
