{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"developers/HowToArray3/","text":"How to write universal array3 code Type of arrays Arrays can be: - structured - unstructured: - BE/ME - NGON In place functions Use getFromArray3 to pass from python object to FldArrays: PyObject* o; if (!PyArg_ParseTuple(args, \"O\", &o)) return NULL; E_Int ni, nj, nk; K_FLD::FldArrayF* f; K_FLD::FldArrayI* c; char* varString; char* eltType; E_Int ret = K_ARRAY::getFromArray3(o, varString, f, ni, nj, nk, c, eltType); if ret = 1, it is a structured array if ret = 2, it is an unstructured array. Release memory. Dont forget at the end: RELEASESHAREDB(ret, o, f, c); Universal access on field size: E_Int nfld = f->getNfld(); // nbre de champs E_Int npts = f->getSize(); // nbre de pts Universal access on field pointers: E_Float* x = f->begin(1); for (E_Int i = 0; i < 5; i++) printf(\" \" SF_F_ \" \", x[i]); // modification x[0] = -0.05; Universal access on field with operator() FldArrayF& fr = (*f); fr(1, 1) = +0.05; Universal access on NGON connectivity (ret=2, eltType=\"NGON\" or \"NGON*\"): E_Int nfaces = c->getNFaces(); E_Int nelts = c->getNElts(); E_Int* ngon = c->getNGon(); E_Int* nface = c->getNFace(); E_Int* indPG = c->getIndPG(); // always exists, must be called E_Int* indPH = c->getIndPH(); // Universal acces on face 0 E_Int size; E_Int* face = c->getFace(0, size, ngon, indPG); printf(\"face \" SF_D_ \":\", E_Int(0)); for (E_Int i = 0; i < size; i++) printf(\" \" SF_D_ \" \", face[i]); printf(\"\\n\"); // Universal access on element 0 E_Int* elt = c->getElt(0, size, nface, indPH); printf(\"elt \" SF_D_ \":\", E_Int(0)); for (E_Int i = 0; i < size; i++) printf(\" \" SF_D_ \" \", elt[i]); printf(\"\\n\"); Universal access on NGON sizes (may be usefull for allocation): E_Int sizeNGon = c->getSizeNGon(); // for NGONv3, contains face number and so is greater than for CGNSv4 E_Int sizeNFace = c->getSizeNFace(); Universal access on BE/ME connectivity (ret=2, eltType=\"TRI\",\"QUAD\", \"TRI,QUAD\", \"TRI*\") E_Int nc = c->getNConnect(); // in case of BE, nc is 1 // universal eltType split std::vector<char*> eltTypes; K_ARRAY::extractVars(eltType, eltTypes); // access all connectivities for (E_Int ic = 0; ic < nc; ic++) { FldArrayI& cm = *(c->getConnect(ic)); E_Int nelts = cm.getSize(); // number of elements E_Int nvpe = cm.getNfld(); // number of vertices by element char* eltTypel = eltTypes[i]; // type of elements for (E_Int i = 0; i < nelts; i++) { cm(i,1) = 1; cm(i,2) = 2; cm(i,3) = 3; // dont use begin on connects } } // delete eltType split for (size_t i = 0; i < eltTypes.size(); i++) delete [] eltTypes[i]; Getting array api (internal storage information, rare usage): E_Int apif = f->getApi(); if apif=1, it is an array1 if apif=2, it is an array2 or an array3 For structured array, there is no difference between array2 and array3. For NGONs: E_Int isNGon = c->isNGon(); // isNGon=1: NGON, NFACE CGNSv3 array1 compact // isNGON=2: NGON, NFACE, [indPG], [indPF] rake CGNSv3 // isNGON=3: NGON, NFACE, indPG, indPF rake CGNSv4 Create new array Build empty arrays. Pass an api arg in your function. Structured: PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", ni, nj, nk, api); Then get pointers to fill values: K_ARRAY::getFromArray3(tpl, f); BE: PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, eltType, false, api); Then get pointers to fill values: K_ARRAY::getFromArray3(tpl, f, cn); ME: PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts, std::vector<E_Int>& neltsPerConnect, \"TRI,QUAD\", false, api) NGON: PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, nfaces, \"NGON\", sizeNGon, sizeNFace, ngonType, false, api); Copy functions If input is api=1, build api=1 else build api=3. Structured: build identical array to f. Varstring can change. If api=-1, use input api. PyObject* K_ARRAY::buildArray3(f, \"x,y,z\", ni, nj, nk, api=-1) BE/ME/NGON: build identical array to f and cn. Varstring can change. If api=-1, use input api. PyObject* K_ARRAY::buildArray3(f, \"x,y,z\", varString, cn, \"TRI\", api=-1)","title":"How to write universal array3 code"},{"location":"developers/HowToArray3/#how-to-write-universal-array3-code","text":"","title":"How to write universal array3 code"},{"location":"developers/HowToArray3/#type-of-arrays","text":"Arrays can be: - structured - unstructured: - BE/ME - NGON","title":"Type of arrays"},{"location":"developers/HowToArray3/#in-place-functions","text":"Use getFromArray3 to pass from python object to FldArrays: PyObject* o; if (!PyArg_ParseTuple(args, \"O\", &o)) return NULL; E_Int ni, nj, nk; K_FLD::FldArrayF* f; K_FLD::FldArrayI* c; char* varString; char* eltType; E_Int ret = K_ARRAY::getFromArray3(o, varString, f, ni, nj, nk, c, eltType); if ret = 1, it is a structured array if ret = 2, it is an unstructured array. Release memory. Dont forget at the end: RELEASESHAREDB(ret, o, f, c); Universal access on field size: E_Int nfld = f->getNfld(); // nbre de champs E_Int npts = f->getSize(); // nbre de pts Universal access on field pointers: E_Float* x = f->begin(1); for (E_Int i = 0; i < 5; i++) printf(\" \" SF_F_ \" \", x[i]); // modification x[0] = -0.05; Universal access on field with operator() FldArrayF& fr = (*f); fr(1, 1) = +0.05; Universal access on NGON connectivity (ret=2, eltType=\"NGON\" or \"NGON*\"): E_Int nfaces = c->getNFaces(); E_Int nelts = c->getNElts(); E_Int* ngon = c->getNGon(); E_Int* nface = c->getNFace(); E_Int* indPG = c->getIndPG(); // always exists, must be called E_Int* indPH = c->getIndPH(); // Universal acces on face 0 E_Int size; E_Int* face = c->getFace(0, size, ngon, indPG); printf(\"face \" SF_D_ \":\", E_Int(0)); for (E_Int i = 0; i < size; i++) printf(\" \" SF_D_ \" \", face[i]); printf(\"\\n\"); // Universal access on element 0 E_Int* elt = c->getElt(0, size, nface, indPH); printf(\"elt \" SF_D_ \":\", E_Int(0)); for (E_Int i = 0; i < size; i++) printf(\" \" SF_D_ \" \", elt[i]); printf(\"\\n\"); Universal access on NGON sizes (may be usefull for allocation): E_Int sizeNGon = c->getSizeNGon(); // for NGONv3, contains face number and so is greater than for CGNSv4 E_Int sizeNFace = c->getSizeNFace(); Universal access on BE/ME connectivity (ret=2, eltType=\"TRI\",\"QUAD\", \"TRI,QUAD\", \"TRI*\") E_Int nc = c->getNConnect(); // in case of BE, nc is 1 // universal eltType split std::vector<char*> eltTypes; K_ARRAY::extractVars(eltType, eltTypes); // access all connectivities for (E_Int ic = 0; ic < nc; ic++) { FldArrayI& cm = *(c->getConnect(ic)); E_Int nelts = cm.getSize(); // number of elements E_Int nvpe = cm.getNfld(); // number of vertices by element char* eltTypel = eltTypes[i]; // type of elements for (E_Int i = 0; i < nelts; i++) { cm(i,1) = 1; cm(i,2) = 2; cm(i,3) = 3; // dont use begin on connects } } // delete eltType split for (size_t i = 0; i < eltTypes.size(); i++) delete [] eltTypes[i]; Getting array api (internal storage information, rare usage): E_Int apif = f->getApi(); if apif=1, it is an array1 if apif=2, it is an array2 or an array3 For structured array, there is no difference between array2 and array3. For NGONs: E_Int isNGon = c->isNGon(); // isNGon=1: NGON, NFACE CGNSv3 array1 compact // isNGON=2: NGON, NFACE, [indPG], [indPF] rake CGNSv3 // isNGON=3: NGON, NFACE, indPG, indPF rake CGNSv4","title":"In place functions"},{"location":"developers/HowToArray3/#create-new-array","text":"Build empty arrays. Pass an api arg in your function. Structured: PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", ni, nj, nk, api); Then get pointers to fill values: K_ARRAY::getFromArray3(tpl, f); BE: PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, eltType, false, api); Then get pointers to fill values: K_ARRAY::getFromArray3(tpl, f, cn); ME: PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts, std::vector<E_Int>& neltsPerConnect, \"TRI,QUAD\", false, api) NGON: PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, nfaces, \"NGON\", sizeNGon, sizeNFace, ngonType, false, api);","title":"Create new array"},{"location":"developers/HowToArray3/#copy-functions","text":"If input is api=1, build api=1 else build api=3. Structured: build identical array to f. Varstring can change. If api=-1, use input api. PyObject* K_ARRAY::buildArray3(f, \"x,y,z\", ni, nj, nk, api=-1) BE/ME/NGON: build identical array to f and cn. Varstring can change. If api=-1, use input api. PyObject* K_ARRAY::buildArray3(f, \"x,y,z\", varString, cn, \"TRI\", api=-1)","title":"Copy functions"},{"location":"developers/guide4devs/","text":"For developers: Editor: indent with spaces (2 or 4 depending on file complexity). Dont use tabs. use utf8/lf encoding respect typo for commas: t1, t2, a3 . respect type for two points: a: Python Functions: no snake (my_function) in function names or arguments. Use Camel (myFunction). short comment string in function header function must have a test before commit in place function starts with _ and return None internal functions ends with __ function must have a copyRef counterpart that calls in place function no IO in function (must work on input t and return t or a copy of t) try to unify argument names with existing functions complexifying an existing function, ie adding an argument or modifying the meaning of an argument, must be discussed check that a function performs correctly on FlowSolutionNodes , FlowSolution#Centers , ZoneBC and ZoneGridConnectivity if a function is fully operational, write the doc always run validCassiopee in full against the global test database before commit Tests: no snake in test file name. first line of test shoud be # - functionName (pyTree) - seq tests finishes by _t1, _t2. parallel test finishes by _m1, _m2 and are run on 2 procs. in tests, dont use input files, create the test case in the script. a test must run in less than 10 seconds (ideally 1 sec). OpenMP: for computationally intensive loops, use omp parallelisation wherever possible. For example: #pragma omp parallel { E_Int localInt; E_Float localFloat; #pragma omp for for (E_Int i = 0; i < ncells; i++) { localInt = i; localFloat = 12./i; /* ... */ } } the pragma omp parallel clause creates threads and has a slight cost: group pragma omp for clauses within its scope if possible. the pragma omp for clause splits the for loop into equal chunks in more complex cases, you can get the thread id and number of threads as: #pragma omp parallel { E_Int ithread = __CURRENT_THREAD__; E_Int numThreads = __NUMTHREADS__; /* ... */ }","title":"For developers:"},{"location":"developers/guide4devs/#for-developers","text":"","title":"For developers:"},{"location":"developers/guide4devs/#editor","text":"indent with spaces (2 or 4 depending on file complexity). Dont use tabs. use utf8/lf encoding respect typo for commas: t1, t2, a3 . respect type for two points: a:","title":"Editor:"},{"location":"developers/guide4devs/#python-functions","text":"no snake (my_function) in function names or arguments. Use Camel (myFunction). short comment string in function header function must have a test before commit in place function starts with _ and return None internal functions ends with __ function must have a copyRef counterpart that calls in place function no IO in function (must work on input t and return t or a copy of t) try to unify argument names with existing functions complexifying an existing function, ie adding an argument or modifying the meaning of an argument, must be discussed check that a function performs correctly on FlowSolutionNodes , FlowSolution#Centers , ZoneBC and ZoneGridConnectivity if a function is fully operational, write the doc always run validCassiopee in full against the global test database before commit","title":"Python Functions:"},{"location":"developers/guide4devs/#tests","text":"no snake in test file name. first line of test shoud be # - functionName (pyTree) - seq tests finishes by _t1, _t2. parallel test finishes by _m1, _m2 and are run on 2 procs. in tests, dont use input files, create the test case in the script. a test must run in less than 10 seconds (ideally 1 sec).","title":"Tests:"},{"location":"developers/guide4devs/#openmp","text":"for computationally intensive loops, use omp parallelisation wherever possible. For example: #pragma omp parallel { E_Int localInt; E_Float localFloat; #pragma omp for for (E_Int i = 0; i < ncells; i++) { localInt = i; localFloat = 12./i; /* ... */ } } the pragma omp parallel clause creates threads and has a slight cost: group pragma omp for clauses within its scope if possible. the pragma omp for clause splits the for loop into equal chunks in more complex cases, you can get the thread id and number of threads as: #pragma omp parallel { E_Int ithread = __CURRENT_THREAD__; E_Int numThreads = __NUMTHREADS__; /* ... */ }","title":"OpenMP:"},{"location":"developers/makingMovies/","text":"Making movies Creating mp4 from images ffmpeg -framerate 20 -pattern_type glob -i \"*.png\" -b:v 50000k video.mp4 or ffmpeg -framerate 20 -i image%02d.png -b:v 50000k video.mp4 Adding metadata for 360 mp4 exiftool -XMP-GSpherical:Spherical=\"true\" video.mp4","title":"Making movies"},{"location":"developers/makingMovies/#making-movies","text":"","title":"Making movies"},{"location":"developers/makingMovies/#creating-mp4-from-images","text":"ffmpeg -framerate 20 -pattern_type glob -i \"*.png\" -b:v 50000k video.mp4 or ffmpeg -framerate 20 -i image%02d.png -b:v 50000k video.mp4","title":"Creating mp4 from images"},{"location":"developers/makingMovies/#adding-metadata-for-360-mp4","text":"exiftool -XMP-GSpherical:Spherical=\"true\" video.mp4","title":"Adding metadata for 360 mp4"},{"location":"developers/Docker/UsingDocker/","text":"Running Cassiopee in a Docker container 1. Installing Docker and its dependencies Dependencies: sudo apt install apt-transport-https ca-certificates curl software-properties-common Docker: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt update && apt install docker-ce -y sudo systemctl status docker Configure Docker: sudo usermod -aG docker ${USER} groups ${USER} 2. Pulling from DockerHub Please pull the official image of Cassiopee from DockerHub docker pull cassiopee486/cassiopee:<tag> where tag is a version tag such as v4.0b (in the remainder of these notes, v4.0b is used). Available tags, from v4.0b onwards , are recalled on this page . Verify that the image is now present in the list of downloaded images docker images 3. Running a container The Cassiopee container can be run interactively for version v4.0b like so xhost +local:docker docker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b and the instance of the container will be removed after it execution thanks to --rm . Note that none of the modifications you may have made in the container will persist. Please consider using volumes or bind mounts if this is something you may benefit from. An example is given below for a bind mount with read and write permissions using the command-line flag -v /home/user/git/io:/io , where the local folder /home/user/git/io is mapped to the /io folder in the container xhost +local:docker docker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -v /home/user/git/io:/io -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b After execution, feel free to check the list of running instances (it should be none) docker ps -a 4. Deleting a Docker image To delete an outdated docker image, first list all existing images, copy the hash of the image you would like to delete and remove from hash as docker images docker rmi <imageHash>","title":"Running Cassiopee in a Docker container"},{"location":"developers/Docker/UsingDocker/#running-cassiopee-in-a-docker-container","text":"","title":"Running Cassiopee in a Docker container"},{"location":"developers/Docker/UsingDocker/#1-installing-docker-and-its-dependencies","text":"Dependencies: sudo apt install apt-transport-https ca-certificates curl software-properties-common Docker: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt update && apt install docker-ce -y sudo systemctl status docker Configure Docker: sudo usermod -aG docker ${USER} groups ${USER}","title":"1. Installing Docker and its dependencies"},{"location":"developers/Docker/UsingDocker/#2-pulling-from-dockerhub","text":"Please pull the official image of Cassiopee from DockerHub docker pull cassiopee486/cassiopee:<tag> where tag is a version tag such as v4.0b (in the remainder of these notes, v4.0b is used). Available tags, from v4.0b onwards , are recalled on this page . Verify that the image is now present in the list of downloaded images docker images","title":"2. Pulling from DockerHub"},{"location":"developers/Docker/UsingDocker/#3-running-a-container","text":"The Cassiopee container can be run interactively for version v4.0b like so xhost +local:docker docker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b and the instance of the container will be removed after it execution thanks to --rm . Note that none of the modifications you may have made in the container will persist. Please consider using volumes or bind mounts if this is something you may benefit from. An example is given below for a bind mount with read and write permissions using the command-line flag -v /home/user/git/io:/io , where the local folder /home/user/git/io is mapped to the /io folder in the container xhost +local:docker docker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -v /home/user/git/io:/io -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b After execution, feel free to check the list of running instances (it should be none) docker ps -a","title":"3. Running a container"},{"location":"developers/Docker/UsingDocker/#4-deleting-a-docker-image","text":"To delete an outdated docker image, first list all existing images, copy the hash of the image you would like to delete and remove from hash as docker images docker rmi <imageHash>","title":"4. Deleting a Docker image"},{"location":"developers/Git/GitShortcuts/","text":"Useful git shortcuts Detailed & compact display of git log with graph alias gitlog=\"git log --all --graph --pretty=format:'%C(auto)%d%Creset %C(Yellow) %h %Creset|| %C(Cyan) %as %Creset || %C(dim magenta) %an %Creset|| %s'\" See below for an example of the output of the above command: Add branch detail to working path directory - in case of multiple branches To be placed in the environment script & to be sourced blackcolprompt='\\[\\033[30m\\]' purplecolprompt='\\[\\033[35m\\]' PS1='`if [ \\$? = 0 ]; then echo \\[\\033[01\\;32m\\] ; else echo \\[\\033[01\\;31m\\]; fi`\\u@\\h\\[\\033[01;34m\\] \\w$( gitinfo=\"$(git branch 2>/dev/null | grep \"^*\" | cut -c3-)\"; if [ \"$gitinfo\" ] then printf '$purplecolprompt'@\"$gitinfo\"'$redcolprompt' fi ) \\$\\[\\033[00m\\]' The above command adds the '@main' seen below: Git grep with line number Git grep with line number for (1) a single variable or (2) a single variable in a specific working directory. The latter automatically ignores the */test directory and ignores the .rst files. e.g. 1) gitgrep var2 2) gitgrep var 2 Converter # first argument: variable names # second argument: local path to directory gitgrep () { if [ \"$#\" -lt 2 ] then echo git grep -n \"$1\"; git grep -n \"$1\"; elif [ \"$#\" -lt 3 ] then echo git grep -n \"$1\" -- ':!'\"$2\"'/test/*' ':!*.rst' \"$2\"; git grep -n \"$1\" -- ':!'\"$2\"'/test/*' ':!*.rst' \"$2\"; else echo \"gitgrep can only take a max of 2 arguments\" fi }","title":"Useful git shortcuts"},{"location":"developers/Git/GitShortcuts/#useful-git-shortcuts","text":"","title":"Useful git shortcuts"},{"location":"developers/Git/GitShortcuts/#detailed-compact-display-of-git-log-with-graph","text":"alias gitlog=\"git log --all --graph --pretty=format:'%C(auto)%d%Creset %C(Yellow) %h %Creset|| %C(Cyan) %as %Creset || %C(dim magenta) %an %Creset|| %s'\" See below for an example of the output of the above command:","title":"Detailed &amp; compact display of git log with graph"},{"location":"developers/Git/GitShortcuts/#add-branch-detail-to-working-path-directory-in-case-of-multiple-branches","text":"To be placed in the environment script & to be sourced blackcolprompt='\\[\\033[30m\\]' purplecolprompt='\\[\\033[35m\\]' PS1='`if [ \\$? = 0 ]; then echo \\[\\033[01\\;32m\\] ; else echo \\[\\033[01\\;31m\\]; fi`\\u@\\h\\[\\033[01;34m\\] \\w$( gitinfo=\"$(git branch 2>/dev/null | grep \"^*\" | cut -c3-)\"; if [ \"$gitinfo\" ] then printf '$purplecolprompt'@\"$gitinfo\"'$redcolprompt' fi ) \\$\\[\\033[00m\\]' The above command adds the '@main' seen below:","title":"Add branch detail to working path directory - in case of multiple branches"},{"location":"developers/Git/GitShortcuts/#git-grep-with-line-number","text":"Git grep with line number for (1) a single variable or (2) a single variable in a specific working directory. The latter automatically ignores the */test directory and ignores the .rst files. e.g. 1) gitgrep var2 2) gitgrep var 2 Converter # first argument: variable names # second argument: local path to directory gitgrep () { if [ \"$#\" -lt 2 ] then echo git grep -n \"$1\"; git grep -n \"$1\"; elif [ \"$#\" -lt 3 ] then echo git grep -n \"$1\" -- ':!'\"$2\"'/test/*' ':!*.rst' \"$2\"; git grep -n \"$1\" -- ':!'\"$2\"'/test/*' ':!*.rst' \"$2\"; else echo \"gitgrep can only take a max of 2 arguments\" fi }","title":"Git grep with line number"},{"location":"developers/Git/cloningCassiopee/","text":"Cloning Cassiopee Add an SSH key to your Github account Start the SSH agent eval `ssh-agent -s` Create a new SSH key (no passphrase, add a meaningful suffix to the key) and add it to the SSH agent ssh-keygen -t ed25519 -C <firstname.name@example.com> ssh-add <full path to the private key (id_edXXXXX)> Copy the contents of the public key (id_edXXXXX.pub) to your online Github account cat <full path to the public key> Go to github.com/\\ , click on your profile in the top right-hand corner, then Settings > Access > SSH and GPG keys > New SSH key and paste it in the text box. Set up your github account in a terminal window git config --global user.name <username> git config --global user.email <firstname.name@example.com> Clone or Fork Cassiopee If you are not planning on making any modifications to the source code, then you can clone the main branch of the Cassiopee repository. Change directory to where you'd like the Cassiopee Github repository to be and type: git clone --branch main --single-branch git@github.com:onera/Cassiopee.git To contribute to the Github repository instead, please consider creating a fork first: on the github repo , click on the Fork button followed by Create new fork . Then, you can clone the dev branch of your Fork as: git clone git@github.com:<github_username>/Cassiopee.git The alias origin that is defined on your machine is pointing to your remote fork repository. Let's add another shortname called upstream to store the URL of the upstream/official repository: cd Cassiopee git remote -v git remote add upstream git@github.com:onera/Cassiopee.git git remote -v The next time you will want to synchronise your fork from the command line, please type git status # make sure you have no local changes git pull upstream dev git push If you have local changes that you would wish to commit and push after synchronising your fork and local / working directories, please stash them as explained here . Install Cassiopee To install Cassiopee, please visit one of these Installation pages: - Windows - Ubuntu","title":"Cloning Cassiopee"},{"location":"developers/Git/cloningCassiopee/#cloning-cassiopee","text":"","title":"Cloning Cassiopee"},{"location":"developers/Git/cloningCassiopee/#add-an-ssh-key-to-your-github-account","text":"Start the SSH agent eval `ssh-agent -s` Create a new SSH key (no passphrase, add a meaningful suffix to the key) and add it to the SSH agent ssh-keygen -t ed25519 -C <firstname.name@example.com> ssh-add <full path to the private key (id_edXXXXX)> Copy the contents of the public key (id_edXXXXX.pub) to your online Github account cat <full path to the public key> Go to github.com/\\ , click on your profile in the top right-hand corner, then Settings > Access > SSH and GPG keys > New SSH key and paste it in the text box. Set up your github account in a terminal window git config --global user.name <username> git config --global user.email <firstname.name@example.com>","title":"Add an SSH key to your Github account"},{"location":"developers/Git/cloningCassiopee/#clone-or-fork-cassiopee","text":"If you are not planning on making any modifications to the source code, then you can clone the main branch of the Cassiopee repository. Change directory to where you'd like the Cassiopee Github repository to be and type: git clone --branch main --single-branch git@github.com:onera/Cassiopee.git To contribute to the Github repository instead, please consider creating a fork first: on the github repo , click on the Fork button followed by Create new fork . Then, you can clone the dev branch of your Fork as: git clone git@github.com:<github_username>/Cassiopee.git The alias origin that is defined on your machine is pointing to your remote fork repository. Let's add another shortname called upstream to store the URL of the upstream/official repository: cd Cassiopee git remote -v git remote add upstream git@github.com:onera/Cassiopee.git git remote -v The next time you will want to synchronise your fork from the command line, please type git status # make sure you have no local changes git pull upstream dev git push If you have local changes that you would wish to commit and push after synchronising your fork and local / working directories, please stash them as explained here .","title":"Clone or Fork Cassiopee"},{"location":"developers/Git/cloningCassiopee/#install-cassiopee","text":"To install Cassiopee, please visit one of these Installation pages: - Windows - Ubuntu","title":"Install Cassiopee"},{"location":"developers/Git/contributing/","text":"Contributing to the Cassiopee Github repository TLDR To contribute, you need to create a Pull Request from your remote fork webpage: https://github.com/github_username/Cassiopee/. Click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes) Forking the upstream repository To create your own fork of Cassiopee, please read this section Synchronising your fork from the dev branch of the upstream repository From your remote fork webpage (https://github.com/github_username/Cassiopee/), click on the Sync fork button From a terminal window, follow the instructions given at the end of this paragraph Stashing Pulling updates will fail if you have local changes. You can first check the state of your local/working directories with git status and if anything is listed, please consider stashing it (ie, saving it). Below is a cheat sheet on stashing git stash list # list all stashes in antichronological order of insertion in the stashing stack git stash push -m \"stashing message to help you remember what this stash is about\" # save your local changes in your local stashing stack git stash apply stash@{stash_id} # reinstate the modifications saved in `stash_id` in your working directory. stash_id 0 is the most recent. git stash drop stash@{stash_id} # delete stash stash_id - other stashes may be reindexed git stash pop stash@{stash_id} # combine git stash apply and git stash drop in one command Synchronising your local and working directories from your remote fork To synchronise your local directory only: git fetch origin dev To synchronise your working directory from your local directory: git merge To synchronise both directories at once: git pull origin dev Synchronising your local and working directories, and your remote fork, from the upstream repo git pull upstream dev git push origin dev Committing and pushing to your remote fork Committing will commit your local modifications to your local directory from your working directory. First inspect the files that are modified: git status To see the differences, run: git diff <file> or if you'd wish to use a diff tool instead such as meld , type the following command just once git config --global diff.tool meld git config --global --add difftool.prompt false Then, inspect a file using git difftool <file> or all changes in the root directory with meld meld $CASSIOPEE You can then add files and/or folders git add <file1> <file2> <folder1> <file3> or add all modified files/folders to your future commit: git add -u You are now ready to commit to your local repo - provide a meaningful description of the changes: git commit -m \"Module name: message\" Pushing will udpate your remote fork git push Submitting changes to the upstream repository Finally, to propose your modifications to the dev branch of the upstream/official repository, you have to create a Pull Request. Go to the webpage of your remote fork: https://github.com/github_username/Cassiopee/, click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes).","title":"Contributing to the Cassiopee Github repository"},{"location":"developers/Git/contributing/#contributing-to-the-cassiopee-github-repository","text":"","title":"Contributing to the Cassiopee Github repository"},{"location":"developers/Git/contributing/#tldr","text":"To contribute, you need to create a Pull Request from your remote fork webpage: https://github.com/github_username/Cassiopee/. Click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes)","title":"TLDR"},{"location":"developers/Git/contributing/#forking-the-upstream-repository","text":"To create your own fork of Cassiopee, please read this section","title":"Forking the upstream repository"},{"location":"developers/Git/contributing/#synchronising-your-fork-from-the-dev-branch-of-the-upstream-repository","text":"From your remote fork webpage (https://github.com/github_username/Cassiopee/), click on the Sync fork button From a terminal window, follow the instructions given at the end of this paragraph","title":"Synchronising your fork from the dev branch of the upstream repository"},{"location":"developers/Git/contributing/#stashing","text":"Pulling updates will fail if you have local changes. You can first check the state of your local/working directories with git status and if anything is listed, please consider stashing it (ie, saving it). Below is a cheat sheet on stashing git stash list # list all stashes in antichronological order of insertion in the stashing stack git stash push -m \"stashing message to help you remember what this stash is about\" # save your local changes in your local stashing stack git stash apply stash@{stash_id} # reinstate the modifications saved in `stash_id` in your working directory. stash_id 0 is the most recent. git stash drop stash@{stash_id} # delete stash stash_id - other stashes may be reindexed git stash pop stash@{stash_id} # combine git stash apply and git stash drop in one command","title":"Stashing"},{"location":"developers/Git/contributing/#synchronising-your-local-and-working-directories-from-your-remote-fork","text":"To synchronise your local directory only: git fetch origin dev To synchronise your working directory from your local directory: git merge To synchronise both directories at once: git pull origin dev","title":"Synchronising your local and working directories from your remote fork"},{"location":"developers/Git/contributing/#synchronising-your-local-and-working-directories-and-your-remote-fork-from-the-upstream-repo","text":"git pull upstream dev git push origin dev","title":"Synchronising your local and working directories, and your remote fork, from the upstream repo"},{"location":"developers/Git/contributing/#committing-and-pushing-to-your-remote-fork","text":"Committing will commit your local modifications to your local directory from your working directory. First inspect the files that are modified: git status To see the differences, run: git diff <file> or if you'd wish to use a diff tool instead such as meld , type the following command just once git config --global diff.tool meld git config --global --add difftool.prompt false Then, inspect a file using git difftool <file> or all changes in the root directory with meld meld $CASSIOPEE You can then add files and/or folders git add <file1> <file2> <folder1> <file3> or add all modified files/folders to your future commit: git add -u You are now ready to commit to your local repo - provide a meaningful description of the changes: git commit -m \"Module name: message\" Pushing will udpate your remote fork git push","title":"Committing and pushing to your remote fork"},{"location":"developers/Git/contributing/#submitting-changes-to-the-upstream-repository","text":"Finally, to propose your modifications to the dev branch of the upstream/official repository, you have to create a Pull Request. Go to the webpage of your remote fork: https://github.com/github_username/Cassiopee/, click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes).","title":"Submitting changes to the upstream repository"},{"location":"developers/Install/msys2/","text":"Installation on windows (using msys2) Install msys2 Download msys2 (https://www.msys2.org) and install it. Install dependencies In an msys2 mingw64 terminal: pacman -S mingw64/mingw-w64-x86_64-gcc pacman -S mingw64/mingw-w64-x86_64-gcc-fortran pacman -S mingw64/mingw-w64-x86_64-python pacman -S mingw64/mingw-w64-x86_64-python-numpy pacman -S mingw64/mingw-w64-x86_64-scons pacman -S mingw64/mingw-w64-x86_64-python-pip pacman -S mingw64/mingw-w64-x86_64-python-pip-tools pacman -S mingw64/mingw-w64-x86_64-hdf5 pacman -S mingw64/mingw-w64-x86_64-msmpi pacman -S mingw64/mingw-w64-x86_64-oce Install Cassiopee export CASSIOPEE=/d/johndo/Cassiopee export MACHINE=msys2 source $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8 cd $CASSIOPEE/Cassiopee ./install Some usefull pacman commands Update system: pacman -Syu Find package matching keyword: pacman -Ss <keyword> Install package: pacman -S <package> List installed packages: pacman -Qe Remove package: pacman -Rs <package>","title":"Installation on windows (using msys2)"},{"location":"developers/Install/msys2/#installation-on-windows-using-msys2","text":"","title":"Installation on windows (using msys2)"},{"location":"developers/Install/msys2/#install-msys2","text":"Download msys2 (https://www.msys2.org) and install it.","title":"Install msys2"},{"location":"developers/Install/msys2/#install-dependencies","text":"In an msys2 mingw64 terminal: pacman -S mingw64/mingw-w64-x86_64-gcc pacman -S mingw64/mingw-w64-x86_64-gcc-fortran pacman -S mingw64/mingw-w64-x86_64-python pacman -S mingw64/mingw-w64-x86_64-python-numpy pacman -S mingw64/mingw-w64-x86_64-scons pacman -S mingw64/mingw-w64-x86_64-python-pip pacman -S mingw64/mingw-w64-x86_64-python-pip-tools pacman -S mingw64/mingw-w64-x86_64-hdf5 pacman -S mingw64/mingw-w64-x86_64-msmpi pacman -S mingw64/mingw-w64-x86_64-oce","title":"Install dependencies"},{"location":"developers/Install/msys2/#install-cassiopee","text":"export CASSIOPEE=/d/johndo/Cassiopee export MACHINE=msys2 source $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8 cd $CASSIOPEE/Cassiopee ./install","title":"Install Cassiopee"},{"location":"developers/Install/msys2/#some-usefull-pacman-commands","text":"Update system: pacman -Syu Find package matching keyword: pacman -Ss <keyword> Install package: pacman -S <package> List installed packages: pacman -Qe Remove package: pacman -Rs <package>","title":"Some usefull pacman commands"},{"location":"developers/Install/ubuntu/","text":"Installation on linux (ubuntu) Tested on ubuntu 24.04. Install dependencies sudo apt-get install python3-dev sudo apt-get install python3-numpy sudo apt-get install python3-distutils-extra sudo apt-get install pip sudo apt-get install scons sudo apt-get install gcc sudo apt-get install g++ sudo apt-get install gfortran sudo apt-get install libopenmpi-dev sudo apt-get install python3-mpi4py sudo apt-get install libhdf5-openmpi-dev sudo apt-get install python3-tk sudo apt-get install libglu1-mesa-dev sudo apt-get install mesa-common-dev sudo apt-get install libosmesa6-dev sudo apt-get install xorg-dev sudo apt-get install libocct-foundation-dev sudo apt-get install libocct-modeling-algorithms-dev sudo apt-get install libocct-data-exchange-dev sudo apt-get install libocct-modeling-data-dev sudo apt-get install libocct-draw-dev Install Cassiopee export CASSIOPEE=/d/johndo/Cassiopee export MACHINE=ubuntu source $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8 cd $CASSIOPEE/Cassiopee ./install More apt-get commands Find package from keyword: apt-cache search <keyword> Install package: sudo apt-get install <package> Remove package: sudo apt-get remove <package>","title":"Installation on linux (ubuntu)"},{"location":"developers/Install/ubuntu/#installation-on-linux-ubuntu","text":"Tested on ubuntu 24.04.","title":"Installation on linux (ubuntu)"},{"location":"developers/Install/ubuntu/#install-dependencies","text":"sudo apt-get install python3-dev sudo apt-get install python3-numpy sudo apt-get install python3-distutils-extra sudo apt-get install pip sudo apt-get install scons sudo apt-get install gcc sudo apt-get install g++ sudo apt-get install gfortran sudo apt-get install libopenmpi-dev sudo apt-get install python3-mpi4py sudo apt-get install libhdf5-openmpi-dev sudo apt-get install python3-tk sudo apt-get install libglu1-mesa-dev sudo apt-get install mesa-common-dev sudo apt-get install libosmesa6-dev sudo apt-get install xorg-dev sudo apt-get install libocct-foundation-dev sudo apt-get install libocct-modeling-algorithms-dev sudo apt-get install libocct-data-exchange-dev sudo apt-get install libocct-modeling-data-dev sudo apt-get install libocct-draw-dev","title":"Install dependencies"},{"location":"developers/Install/ubuntu/#install-cassiopee","text":"export CASSIOPEE=/d/johndo/Cassiopee export MACHINE=ubuntu source $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8 cd $CASSIOPEE/Cassiopee ./install","title":"Install Cassiopee"},{"location":"developers/Install/ubuntu/#more-apt-get-commands","text":"Find package from keyword: apt-cache search <keyword> Install package: sudo apt-get install <package> Remove package: sudo apt-get remove <package>","title":"More apt-get commands"}]}