name: publish PyPI

on:
  push:
    workflow_dispatch:  # allows manual trigger
    tags:
      - 'v*'
#    branches:
#      - 'pypi'

jobs:
  build:
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: "3.8"
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Pull manylinux2014 image
        run: docker pull quay.io/pypa/manylinux2014_x86_64
        
      - name: Build Cassiopee in a Docker container
        run: |
          docker run --rm -v $GITHUB_WORKSPACE/..:/io quay.io/pypa/manylinux2014_x86_64:latest /bin/bash -c "
              export PATH=/opt/python/cp312-cp312/bin:\$PATH
              yum update && yum install -y \
                  gcc \
                  gcc-c++ \
                  gcc-gfortran \
                  openmpi \
                  openmpi-devel \
                  hdf5 \
                  hdf5-devel \
                  tk \
                  mesa-libGL \
                  mesa-libGL-devel \
                  mesa-libGLU \
                  mesa-libGLU-devel \
                  mesa-libOSMesa \
                  mesa-libOSMesa-devel \
                  libX11-devel \
                  libXext-devel \
                  libXmu-devel \
                  libXi-devel \
                  libXrender-devel \
                  libpng-devel \
                  zlib-devel \
                  xorg-x11-server-devel \
                  OCE-devel \
                  OCE-draw \
                  OCE-foundation \
                  OCE-modeling \
                  OCE-ocaf \
                  OCE-visualization
              pip3 install \
                  wheel \
                  auditwheel \
                  setuptools \
                  scons \
                  numpy
              export PATH=/usr/lib64/openmpi/bin:\$PATH
              export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:\$LD_LIBRARY_PATH
              export CFLAGS="-std=c99"
              pip3 install mpi4py
              export CFLAGS="-std=c11"
              python --version && python -m pip list
              export CASSIOPEE=/io/Cassiopee
              export MACHINE=azure
              PKG_NAME=\$(grep '^name =' \$CASSIOPEE/pyproject.toml | sed 's/name = \"\(.*\)\"/\\1/')
              PKG_VERSION=\$(grep '^version =' \$CASSIOPEE/pyproject.toml | sed 's/version = \"\(.*\)\"/\\1/')
              PKG_NV=\${PKG_NAME}-\${PKG_VERSION}
              cd \$CASSIOPEE/Cassiopee
              . \$CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8
              sed -i "s/OCC//g" MODULES
              FREE_MODULES=\$(cat MODULES | head -1 | cut -d '=' -f 2 | tr -d \')
              ./install
              cd \$CASSIOPEE/Dist/bin/\$ELSAPROD
              find . -type f -name '*.whl' -exec mv {} \$CASSIOPEE \;
              find /tmp/ -type f -name 'KCore*.whl' -exec mv {} \$CASSIOPEE \;
              cd \$CASSIOPEE
              mkdir \$CASSIOPEE/\$PKG_NAME
              for kwheel in \$(find . -name '*.whl'); do
                  wheel unpack "\$kwheel" --dest \$CASSIOPEE/\$PKG_NAME;
                  rm "\$kwheel";
              done
              cd \$CASSIOPEE/\$PKG_NAME
              for dir in \$(find . -maxdepth 1 -type d -name \"*-\${PKG_VERSION}\"); do
                  mv \$dir/* .
              done
              mv XCore-\${PKG_VERSION}.dist-info \${PKG_NV}.dist-info
              echo \$FREE_MODULES | tr ' ' '\n' > \${PKG_NV}.dist-info/toplevel.txt
              sed -i \"/Name: /c\Name: \${PKG_NAME}\" \${PKG_NV}.dist-info/METADATA
              sed -i '/Summary: /c\Summary: CFD pre- and post-processing python modules' \${PKG_NV}.dist-info/METADATA
              for dir in \$(find . -maxdepth 1 -type d -name \"*-\${PKG_VERSION}\" -not -name '[K,X]Core*'); do
                  echo \"\" >> \${PKG_NV}.dist-info/RECORD && cat \${dir}.dist-info/RECORD >> \${PKG_NV}.dist-info/RECORD
              done
              sed -i \"/-\${PKG_VERSION}\.dist-info/d\" \${PKG_NV}.dist-info/RECORD
              echo \"\" >> KCore-\${PKG_VERSION}.dist-info/RECORD
              cat \${PKG_NV}.dist-info/RECORD >> KCore-\${PKG_VERSION}.dist-info/RECORD
              mv KCore-\${PKG_VERSION}.dist-info/RECORD \${PKG_NV}.dist-info/RECORD
              sed -i \"s/KCore-\${PKG_VERSION}\.dist-info/\${PKG_NV}\.dist-info/g\" \${PKG_NV}.dist-info/RECORD
              cp \$CASSIOPEE/Cassiopee/KCore/Dist.py KCore/
              cp \$CASSIOPEE/Cassiopee/KCore/installPath.py KCore/
              cp \$CASSIOPEE/Cassiopee/KCore/installBase.py KCore/
              cp \$CASSIOPEE/Cassiopee/KCore/installLib.py KCore/
              cp \$CASSIOPEE/Cassiopee/Converter/Converter/kpython Converter/
              mkdir -p CPlot/apps
              cp \$CASSIOPEE/Cassiopee/CPlot/apps/cassiopee CPlot/apps/
              cp \$CASSIOPEE/Cassiopee/CPlot/apps/kcgnsview CPlot/apps/
              sed -i '1i CPlot/apps/kcgnsview,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i CPlot/apps/cassiopee,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i Converter/kpython,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i KCore/installBase.py,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i KCore/installPath.py,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i KCore/installLib.py,,' \${PKG_NV}.dist-info/RECORD
              sed -i '1i KCore/Dist.py,,' \${PKG_NV}.dist-info/RECORD
              find . -maxdepth 1 -type d -name '*.dist-info' -not -name \"\${PKG_NV}.dist-info\" -exec rm -rf {} +
              find . -maxdepth 1 -type d -name \"*-\${PKG_VERSION}\" -exec rm -rf {} +
              cat \${PKG_NV}.dist-info/METADATA
              cat \${PKG_NV}.dist-info/toplevel.txt
              cat \${PKG_NV}.dist-info/RECORD
              cd .. && python -m wheel pack \$PKG_NAME
              for kwheel in \$(find . -name '*.whl'); do
                  auditwheel repair \$kwheel;
              done
              ls .
              ls wheelhouse
          "
            
#      - name: Publish to Test-PyPI
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
#        run: |
#          export CASSIOPEE=$GITHUB_WORKSPACE/
#          ls $CASSIOPEE
#          for kwheel in $(find $CASSIOPEE/wheelhouse/ -name '*.whl'); do
#              twine upload --repository-url https://test.pypi.org/legacy/ --verbose $kwheel;
#          done
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          export CASSIOPEE=$GITHUB_WORKSPACE
          for kwheel in $(find $CASSIOPEE/wheelhouse/ -name '*.whl'); do
              twine upload --verbose $kwheel;
          done
